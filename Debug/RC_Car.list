
RC_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005678  08005678  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  080056e8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080056e8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d172  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce5  00000000  00000000  0002d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ec  00000000  00000000  0002fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282a2  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d908  00000000  00000000  00058666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc0df  00000000  00000000  00065f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003738  00000000  00000000  00162050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00165788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055b0 	.word	0x080055b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080055b0 	.word	0x080055b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fba0 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f830 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f914 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8e2 	bl	8000744 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000580:	f000 f87c 	bl	800067c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  printf("\033\143");  // clear the terminal before printing
 8000584:	480f      	ldr	r0, [pc, #60]	; (80005c4 <main+0x58>)
 8000586:	f004 f99f 	bl	80048c8 <iprintf>
  printf("Hello RC Car \n\r\n\r");
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0x5c>)
 800058c:	f004 f99c 	bl	80048c8 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc2);
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <main+0x60>)
 8000592:	f000 ff63 	bl	800145c <HAL_ADC_Start>
	// Poll ADC2 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc2, 1);
 8000596:	2101      	movs	r1, #1
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0x60>)
 800059a:	f001 f819 	bl	80015d0 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	ADC_Result = HAL_ADC_GetValue(&hadc2);
 800059e:	480b      	ldr	r0, [pc, #44]	; (80005cc <main+0x60>)
 80005a0:	f001 f8ee 	bl	8001780 <HAL_ADC_GetValue>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <main+0x64>)
 80005aa:	801a      	strh	r2, [r3, #0]
	printf("Pot Value: %u \n\r", ADC_Result);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0x64>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x68>)
 80005b4:	f004 f988 	bl	80048c8 <iprintf>
	HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 fbf6 	bl	8000dac <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 80005c0:	e7e6      	b.n	8000590 <main+0x24>
 80005c2:	bf00      	nop
 80005c4:	080055c8 	.word	0x080055c8
 80005c8:	080055cc 	.word	0x080055cc
 80005cc:	20000084 	.word	0x20000084
 80005d0:	20000170 	.word	0x20000170
 80005d4:	080055e0 	.word	0x080055e0

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f9c3 	bl	8004972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f001 fffb 	bl	80025f8 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f95c 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2310      	movs	r3, #16
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000626:	230a      	movs	r3, #10
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f832 	bl	80026a4 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000646:	f000 f93d 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbfa 	bl	8002e5c <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066e:	f000 f929 	bl	80008c4 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3758      	adds	r7, #88	; 0x58
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_ADC2_Init+0xbc>)
 8000694:	4a29      	ldr	r2, [pc, #164]	; (800073c <MX_ADC2_Init+0xc0>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_ADC2_Init+0xbc>)
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_ADC2_Init+0xbc>)
 80006f4:	f000 fd62 	bl	80011bc <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80006fe:	f000 f8e1 	bl	80008c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_ADC2_Init+0xc4>)
 8000704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000706:	2306      	movs	r3, #6
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070e:	237f      	movs	r3, #127	; 0x7f
 8000710:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000712:	2304      	movs	r3, #4
 8000714:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_ADC2_Init+0xbc>)
 8000720:	f001 f83c 	bl	800179c <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072a:	f000 f8cb 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000084 	.word	0x20000084
 800073c:	50040100 	.word	0x50040100
 8000740:	14f00020 	.word	0x14f00020

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f003 fa48 	bl	8003c1c <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f897 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000e8 	.word	0x200000e8
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b36      	ldr	r3, [pc, #216]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a35      	ldr	r2, [pc, #212]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a29      	ldr	r2, [pc, #164]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <MX_GPIO_Init+0xf0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_GPIO_Init+0xf0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <MX_GPIO_Init+0xf0>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_GPIO_Init+0xf0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f001 fec3 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_GPIO_Init+0xf4>)
 800082e:	f001 febd 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0xf8>)
 800084a:	f001 fd05 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f001 fcf6 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800086c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xf4>)
 8000886:	f001 fce7 	bl	8002258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400
 800089c:	48000800 	.word	0x48000800

080008a0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80008a8:	1d39      	adds	r1, r7, #4
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ae:	2201      	movs	r2, #1
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <__io_putchar+0x20>)
 80008b2:	f003 fa01 	bl	8003cb8 <HAL_UART_Transmit>

  return ch;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000e8 	.word	0x200000e8

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ac      	sub	sp, #176	; 0xb0
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2288      	movs	r2, #136	; 0x88
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f004 f81a 	bl	8004972 <memset>
  if(hadc->Instance==ADC2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <HAL_ADC_MspInit+0xc8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d147      	bne.n	80009d8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800094c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800094e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800095e:	2308      	movs	r3, #8
 8000960:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800096e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fc93 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000984:	f7ff ff9e 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_ADC_MspInit+0xcc>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <HAL_ADC_MspInit+0xcc>)
 800098e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_ADC_MspInit+0xcc>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_ADC_MspInit+0xcc>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_ADC_MspInit+0xcc>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_ADC_MspInit+0xcc>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009be:	230b      	movs	r3, #11
 80009c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 fc40 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	37b0      	adds	r7, #176	; 0xb0
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	50040100 	.word	0x50040100
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0ac      	sub	sp, #176	; 0xb0
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2288      	movs	r2, #136	; 0x88
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 ffb2 	bl	8004972 <memset>
  if(huart->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <HAL_UART_MspInit+0xb0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d13b      	bne.n	8000a90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fc3d 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff ff48 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0xb4>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a64:	230c      	movs	r3, #12
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f001 fbe4 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	37b0      	adds	r7, #176	; 0xb0
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f93e 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fea9 	bl	80008a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f003 ff06 	bl	8004a10 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20018000 	.word	0x20018000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000174 	.word	0x20000174
 8000c38:	200002c8 	.word	0x200002c8

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f003 fec5 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fc6b 	bl	800056c <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca4:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 8000ca8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cac:	200002c8 	.word	0x200002c8

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_Init+0x3c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_Init+0x3c>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f001 fa90 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f80f 	bl	8000cf4 <HAL_InitTick>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	e001      	b.n	8000ce6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce2:	f7ff fdf5 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d023      	beq.n	8000d50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_InitTick+0x70>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fa8d 	bl	800223e <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10f      	bne.n	8000d4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d809      	bhi.n	8000d44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f001 fa65 	bl	8002206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_InitTick+0x74>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e004      	b.n	8000d54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e001      	b.n	8000d54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000178 	.word	0x20000178

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000178 	.word	0x20000178

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008

08000df4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3360      	adds	r3, #96	; 0x60
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <LL_ADC_SetOffset+0x44>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e94:	bf00      	nop
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	03fff000 	.word	0x03fff000

08000ea4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3360      	adds	r3, #96	; 0x60
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3330      	adds	r3, #48	; 0x30
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	4413      	add	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	211f      	movs	r1, #31
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0e9b      	lsrs	r3, r3, #26
 8000f64:	f003 011f 	and.w	r1, r3, #31
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	431a      	orrs	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3314      	adds	r3, #20
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	0e5b      	lsrs	r3, r3, #25
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	0d1b      	lsrs	r3, r3, #20
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	401a      	ands	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	0d1b      	lsrs	r3, r3, #20
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0318 	and.w	r3, r3, #24
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001000:	40d9      	lsrs	r1, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	400b      	ands	r3, r1
 8001006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800100a:	431a      	orrs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	0007ffff 	.word	0x0007ffff

08001024 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 031f 	and.w	r3, r3, #31
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800106c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6093      	str	r3, [r2, #8]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001094:	d101      	bne.n	800109a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e4:	d101      	bne.n	80010ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <LL_ADC_IsEnabled+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_ADC_IsEnabled+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800115a:	f043 0204 	orr.w	r2, r3, #4
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b04      	cmp	r3, #4
 8001180:	d101      	bne.n	8001186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d101      	bne.n	80011ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e130      	b.n	8001438 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d109      	bne.n	80011f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff fb97 	bl	8000918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff3f 	bl	8001080 <LL_ADC_IsDeepPowerDownEnabled>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff25 	bl	800105c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff5a 	bl	80010d0 <LL_ADC_IsInternalRegulatorEnabled>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d115      	bne.n	800124e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff3e 	bl	80010a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800122c:	4b84      	ldr	r3, [pc, #528]	; (8001440 <HAL_ADC_Init+0x284>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	099b      	lsrs	r3, r3, #6
 8001232:	4a84      	ldr	r2, [pc, #528]	; (8001444 <HAL_ADC_Init+0x288>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	099b      	lsrs	r3, r3, #6
 800123a:	3301      	adds	r3, #1
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001240:	e002      	b.n	8001248 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff3c 	bl	80010d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10d      	bne.n	800127a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff75 	bl	800116e <LL_ADC_REG_IsConversionOngoing>
 8001284:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 80c9 	bne.w	8001426 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 80c5 	bne.w	8001426 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012a4:	f043 0202 	orr.w	r2, r3, #2
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff35 	bl	8001120 <LL_ADC_IsEnabled>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d115      	bne.n	80012e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012bc:	4862      	ldr	r0, [pc, #392]	; (8001448 <HAL_ADC_Init+0x28c>)
 80012be:	f7ff ff2f 	bl	8001120 <LL_ADC_IsEnabled>
 80012c2:	4604      	mov	r4, r0
 80012c4:	4861      	ldr	r0, [pc, #388]	; (800144c <HAL_ADC_Init+0x290>)
 80012c6:	f7ff ff2b 	bl	8001120 <LL_ADC_IsEnabled>
 80012ca:	4603      	mov	r3, r0
 80012cc:	431c      	orrs	r4, r3
 80012ce:	4860      	ldr	r0, [pc, #384]	; (8001450 <HAL_ADC_Init+0x294>)
 80012d0:	f7ff ff26 	bl	8001120 <LL_ADC_IsEnabled>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4323      	orrs	r3, r4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4619      	mov	r1, r3
 80012e2:	485c      	ldr	r0, [pc, #368]	; (8001454 <HAL_ADC_Init+0x298>)
 80012e4:	f7ff fd86 	bl	8000df4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e5b      	ldrb	r3, [r3, #25]
 80012ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001306:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	3b01      	subs	r3, #1
 800131c:	045b      	lsls	r3, r3, #17
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	2b00      	cmp	r3, #0
 800132a:	d009      	beq.n	8001340 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <HAL_ADC_Init+0x29c>)
 8001348:	4013      	ands	r3, r2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	430b      	orrs	r3, r1
 8001352:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff1b 	bl	8001194 <LL_ADC_INJ_IsConversionOngoing>
 800135e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13d      	bne.n	80013e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d13a      	bne.n	80013e2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001370:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001378:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001388:	f023 0302 	bic.w	r3, r3, #2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	69b9      	ldr	r1, [r7, #24]
 8001392:	430b      	orrs	r3, r1
 8001394:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800139c:	2b01      	cmp	r3, #1
 800139e:	d118      	bne.n	80013d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013aa:	f023 0304 	bic.w	r3, r3, #4
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013b6:	4311      	orrs	r1, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013bc:	4311      	orrs	r1, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013c2:	430a      	orrs	r2, r1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	e007      	b.n	80013e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10c      	bne.n	8001404 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	f023 010f 	bic.w	r1, r3, #15
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
 8001402:	e007      	b.n	8001414 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020f 	bic.w	r2, r2, #15
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f023 0303 	bic.w	r3, r3, #3
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
 8001424:	e007      	b.n	8001436 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0210 	orr.w	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001436:	7ffb      	ldrb	r3, [r7, #31]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3724      	adds	r7, #36	; 0x24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	053e2d63 	.word	0x053e2d63
 8001448:	50040000 	.word	0x50040000
 800144c:	50040100 	.word	0x50040100
 8001450:	50040200 	.word	0x50040200
 8001454:	50040300 	.word	0x50040300
 8001458:	fff0c007 	.word	0xfff0c007

0800145c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001464:	4857      	ldr	r0, [pc, #348]	; (80015c4 <HAL_ADC_Start+0x168>)
 8001466:	f7ff fddd 	bl	8001024 <LL_ADC_GetMultimode>
 800146a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe7c 	bl	800116e <LL_ADC_REG_IsConversionOngoing>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 809c 	bne.w	80015b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_Start+0x30>
 8001488:	2302      	movs	r3, #2
 800148a:	e097      	b.n	80015bc <HAL_ADC_Start+0x160>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fd73 	bl	8001f80 <ADC_Enable>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f040 8083 	bne.w	80015ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a42      	ldr	r2, [pc, #264]	; (80015c8 <HAL_ADC_Start+0x16c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d002      	beq.n	80014ca <HAL_ADC_Start+0x6e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	e000      	b.n	80014cc <HAL_ADC_Start+0x70>
 80014ca:	4b40      	ldr	r3, [pc, #256]	; (80015cc <HAL_ADC_Start+0x170>)
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d002      	beq.n	80014da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d105      	bne.n	80014e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f2:	d106      	bne.n	8001502 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f023 0206 	bic.w	r2, r3, #6
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001500:	e002      	b.n	8001508 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	221c      	movs	r2, #28
 800150e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <HAL_ADC_Start+0x16c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d002      	beq.n	8001528 <HAL_ADC_Start+0xcc>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	e000      	b.n	800152a <HAL_ADC_Start+0xce>
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_ADC_Start+0x170>)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4293      	cmp	r3, r2
 8001530:	d008      	beq.n	8001544 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d002      	beq.n	8001544 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d114      	bne.n	800156e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800155a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fded 	bl	8001146 <LL_ADC_REG_StartConversion>
 800156c:	e025      	b.n	80015ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_ADC_Start+0x16c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d002      	beq.n	800158a <HAL_ADC_Start+0x12e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e000      	b.n	800158c <HAL_ADC_Start+0x130>
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_ADC_Start+0x170>)
 800158c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00f      	beq.n	80015ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
 80015aa:	e006      	b.n	80015ba <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80015b4:	e001      	b.n	80015ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015b6:	2302      	movs	r3, #2
 80015b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	50040300 	.word	0x50040300
 80015c8:	50040100 	.word	0x50040100
 80015cc:	50040000 	.word	0x50040000

080015d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015da:	4866      	ldr	r0, [pc, #408]	; (8001774 <HAL_ADC_PollForConversion+0x1a4>)
 80015dc:	f7ff fd22 	bl	8001024 <LL_ADC_GetMultimode>
 80015e0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d102      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015ea:	2308      	movs	r3, #8
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e02a      	b.n	8001646 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d002      	beq.n	8001602 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d111      	bne.n	8001626 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f043 0220 	orr.w	r2, r3, #32
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0a4      	b.n	800176a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001620:	2304      	movs	r3, #4
 8001622:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001624:	e00f      	b.n	8001646 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001626:	4853      	ldr	r0, [pc, #332]	; (8001774 <HAL_ADC_PollForConversion+0x1a4>)
 8001628:	f7ff fd0a 	bl	8001040 <LL_ADC_GetMultiDMATransfer>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	f043 0220 	orr.w	r2, r3, #32
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e093      	b.n	800176a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001642:	2304      	movs	r3, #4
 8001644:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001646:	f7ff fba5 	bl	8000d94 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800164c:	e021      	b.n	8001692 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d01d      	beq.n	8001692 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001656:	f7ff fb9d 	bl	8000d94 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d302      	bcc.n	800166c <HAL_ADC_PollForConversion+0x9c>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d112      	bne.n	8001692 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10b      	bne.n	8001692 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e06b      	b.n	800176a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0d6      	beq.n	800164e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc28 	bl	8000f06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e5b      	ldrb	r3, [r3, #25]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d118      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d111      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_ADC_PollForConversion+0x1a8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d002      	beq.n	8001706 <HAL_ADC_PollForConversion+0x136>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	e000      	b.n	8001708 <HAL_ADC_PollForConversion+0x138>
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_ADC_PollForConversion+0x1ac>)
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d008      	beq.n	8001722 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d002      	beq.n	8001722 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b09      	cmp	r3, #9
 8001720:	d104      	bne.n	800172c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	e00c      	b.n	8001746 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_ADC_PollForConversion+0x1a8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d002      	beq.n	800173c <HAL_ADC_PollForConversion+0x16c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	e000      	b.n	800173e <HAL_ADC_PollForConversion+0x16e>
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_ADC_PollForConversion+0x1ac>)
 800173e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d104      	bne.n	8001756 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2208      	movs	r2, #8
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e008      	b.n	8001768 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	220c      	movs	r2, #12
 8001766:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	50040300 	.word	0x50040300
 8001778:	50040100 	.word	0x50040100
 800177c:	50040000 	.word	0x50040000

08001780 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0b6      	sub	sp, #216	; 0xd8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ADC_ConfigChannel+0x22>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e3c9      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x7b6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fccf 	bl	800116e <LL_ADC_REG_IsConversionOngoing>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 83aa 	bne.w	8001f2c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d824      	bhi.n	8001832 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	3b02      	subs	r3, #2
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d81b      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x8e>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_ADC_ConfigChannel+0x5c>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001811 	.word	0x08001811
 8001800:	08001819 	.word	0x08001819
 8001804:	08001821 	.word	0x08001821
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001808:	230c      	movs	r3, #12
 800180a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800180e:	e010      	b.n	8001832 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001810:	2312      	movs	r3, #18
 8001812:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001816:	e00c      	b.n	8001832 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001818:	2318      	movs	r3, #24
 800181a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800181e:	e008      	b.n	8001832 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001828:	e003      	b.n	8001832 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800182a:	2306      	movs	r3, #6
 800182c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001830:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001840:	f7ff fb74 	bl	8000f2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fc90 	bl	800116e <LL_ADC_REG_IsConversionOngoing>
 800184e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fc9c 	bl	8001194 <LL_ADC_INJ_IsConversionOngoing>
 800185c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001864:	2b00      	cmp	r3, #0
 8001866:	f040 81a4 	bne.w	8001bb2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800186a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 819f 	bne.w	8001bb2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	461a      	mov	r2, r3
 8001882:	f7ff fb7f 	bl	8000f84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d00a      	beq.n	80018be <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6919      	ldr	r1, [r3, #16]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018b8:	f7ff fad0 	bl	8000e5c <LL_ADC_SetOffset>
 80018bc:	e179      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff faed 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x14e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fae2 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	e01e      	b.n	8001928 <HAL_ADC_ConfigChannel+0x18c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fad7 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800190c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001918:	2320      	movs	r3, #32
 800191a:	e004      	b.n	8001926 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800191c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1a4>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	e018      	b.n	8001972 <HAL_ADC_ConfigChannel+0x1d6>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800195c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e004      	b.n	8001972 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001972:	429a      	cmp	r2, r3
 8001974:	d106      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff faa6 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fa8a 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x214>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa7f 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	f003 021f 	and.w	r2, r3, #31
 80019ae:	e01e      	b.n	80019ee <HAL_ADC_ConfigChannel+0x252>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fa74 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80019ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80019d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80019de:	2320      	movs	r3, #32
 80019e0:	e004      	b.n	80019ec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80019e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x26a>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	0e9b      	lsrs	r3, r3, #26
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	e018      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x29c>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001a1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	e004      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d106      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2200      	movs	r2, #0
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fa43 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa27 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x2da>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa1c 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	e01e      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x318>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fa11 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e004      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x330>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	e014      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x35a>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	e004      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d106      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9e4 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f9c8 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x398>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2103      	movs	r1, #3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f9bd 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	f003 021f 	and.w	r2, r3, #31
 8001b32:	e017      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x3c8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2103      	movs	r1, #3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f9b2 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e003      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x3e0>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0e9b      	lsrs	r3, r3, #26
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	e011      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x404>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b8c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e003      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d106      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2103      	movs	r1, #3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f98f 	bl	8000ed0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fab2 	bl	8001120 <LL_ADC_IsEnabled>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8140 	bne.w	8001e44 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f7ff fa03 	bl	8000fdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a8f      	ldr	r2, [pc, #572]	; (8001e18 <HAL_ADC_ConfigChannel+0x67c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f040 8131 	bne.w	8001e44 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10b      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x46e>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0e9b      	lsrs	r3, r3, #26
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	bf94      	ite	ls
 8001c02:	2301      	movls	r3, #1
 8001c04:	2300      	movhi	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e019      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x4a2>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c22:	2320      	movs	r3, #32
 8001c24:	e003      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	bf94      	ite	ls
 8001c38:	2301      	movls	r3, #1
 8001c3a:	2300      	movhi	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d079      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x4c2>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	3301      	adds	r3, #1
 8001c56:	069b      	lsls	r3, r3, #26
 8001c58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5c:	e015      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x4ee>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	069b      	lsls	r3, r3, #26
 8001c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x50e>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	e017      	b.n	8001cda <HAL_ADC_ConfigChannel+0x53e>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	e003      	b.n	8001cce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	ea42 0103 	orr.w	r1, r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x564>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0e9b      	lsrs	r3, r3, #26
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f003 021f 	and.w	r2, r3, #31
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	051b      	lsls	r3, r3, #20
 8001cfe:	e018      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x596>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e003      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d32:	430b      	orrs	r3, r1
 8001d34:	e081      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d107      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x5b6>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	3301      	adds	r3, #1
 8001d4a:	069b      	lsls	r3, r3, #26
 8001d4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d50:	e015      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x5e2>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	e003      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	069b      	lsls	r3, r3, #26
 8001d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x602>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	3301      	adds	r3, #1
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	e017      	b.n	8001dce <HAL_ADC_ConfigChannel+0x632>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	61bb      	str	r3, [r7, #24]
  return result;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e003      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x65e>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 021f 	and.w	r2, r3, #31
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	3b1e      	subs	r3, #30
 8001df2:	051b      	lsls	r3, r3, #20
 8001df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df8:	e01e      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x69c>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	60fb      	str	r3, [r7, #12]
  return result;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d104      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e006      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x688>
 8001e16:	bf00      	nop
 8001e18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	051b      	lsls	r3, r3, #20
 8001e34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff f8a0 	bl	8000f84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07a      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e50:	4843      	ldr	r0, [pc, #268]	; (8001f60 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e52:	f7fe fff5 	bl	8000e40 <LL_ADC_GetCommonPathInternalCh>
 8001e56:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a41      	ldr	r2, [pc, #260]	; (8001f64 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12c      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d126      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x6e8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3b      	ldr	r2, [pc, #236]	; (8001f6c <HAL_ADC_ConfigChannel+0x7d0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d15d      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4834      	ldr	r0, [pc, #208]	; (8001f60 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e90:	f7fe ffc3 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	4a36      	ldr	r2, [pc, #216]	; (8001f74 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f9      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ebc:	e040      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d118      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d112      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_ADC_ConfigChannel+0x7cc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x74c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_ADC_ConfigChannel+0x7d0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d12d      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481b      	ldr	r0, [pc, #108]	; (8001f60 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ef4:	f7fe ff91 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef8:	e024      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_ADC_ConfigChannel+0x7e0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d120      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11a      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d115      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f22:	4619      	mov	r1, r3
 8001f24:	480e      	ldr	r0, [pc, #56]	; (8001f60 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f26:	f7fe ff78 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
 8001f2a:	e00c      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f3e:	e002      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f40:	bf00      	nop
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	37d8      	adds	r7, #216	; 0xd8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	80080000 	.word	0x80080000
 8001f60:	50040300 	.word	0x50040300
 8001f64:	c7520000 	.word	0xc7520000
 8001f68:	50040000 	.word	0x50040000
 8001f6c:	50040200 	.word	0x50040200
 8001f70:	20000000 	.word	0x20000000
 8001f74:	053e2d63 	.word	0x053e2d63
 8001f78:	cb840000 	.word	0xcb840000
 8001f7c:	80000001 	.word	0x80000001

08001f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f8c5 	bl	8001120 <LL_ADC_IsEnabled>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d169      	bne.n	8002070 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	4b36      	ldr	r3, [pc, #216]	; (800207c <ADC_Enable+0xfc>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f043 0210 	orr.w	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e055      	b.n	8002072 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f894 	bl	80010f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fd0:	482b      	ldr	r0, [pc, #172]	; (8002080 <ADC_Enable+0x100>)
 8001fd2:	f7fe ff35 	bl	8000e40 <LL_ADC_GetCommonPathInternalCh>
 8001fd6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <ADC_Enable+0x104>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <ADC_Enable+0x108>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ffa:	e002      	b.n	8002002 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002008:	f7fe fec4 	bl	8000d94 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800200e:	e028      	b.n	8002062 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f883 	bl	8001120 <LL_ADC_IsEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f867 	bl	80010f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800202a:	f7fe feb3 	bl	8000d94 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d914      	bls.n	8002062 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d00d      	beq.n	8002062 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e007      	b.n	8002072 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d1cf      	bne.n	8002010 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	8000003f 	.word	0x8000003f
 8002080:	50040300 	.word	0x50040300
 8002084:	20000000 	.word	0x20000000
 8002088:	053e2d63 	.word	0x053e2d63

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff47 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff5c 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff8e 	bl	8002144 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5d 	bl	80020f0 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffb0 	bl	80021ac <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e17f      	b.n	8002568 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8171 	beq.w	8002562 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <HAL_GPIO_Init+0x40>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 0201 	and.w	r2, r3, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b03      	cmp	r3, #3
 8002304:	d118      	bne.n	8002338 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800230c:	2201      	movs	r2, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f003 0201 	and.w	r2, r3, #1
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b03      	cmp	r3, #3
 8002342:	d017      	beq.n	8002374 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80ac 	beq.w	8002562 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <HAL_GPIO_Init+0x330>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	4a5e      	ldr	r2, [pc, #376]	; (8002588 <HAL_GPIO_Init+0x330>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6613      	str	r3, [r2, #96]	; 0x60
 8002416:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <HAL_GPIO_Init+0x330>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002422:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_GPIO_Init+0x334>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800244c:	d025      	beq.n	800249a <HAL_GPIO_Init+0x242>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4f      	ldr	r2, [pc, #316]	; (8002590 <HAL_GPIO_Init+0x338>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <HAL_GPIO_Init+0x23e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4e      	ldr	r2, [pc, #312]	; (8002594 <HAL_GPIO_Init+0x33c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x23a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4d      	ldr	r2, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x340>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x236>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x344>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x232>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_GPIO_Init+0x348>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x22e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_GPIO_Init+0x34c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x22a>
 800247e:	2306      	movs	r3, #6
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002482:	2307      	movs	r3, #7
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x244>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x244>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x244>
 800249a:	2300      	movs	r3, #0
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ac:	4937      	ldr	r1, [pc, #220]	; (800258c <HAL_GPIO_Init+0x334>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_GPIO_Init+0x350>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_GPIO_Init+0x350>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_GPIO_Init+0x350>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_GPIO_Init+0x350>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_GPIO_Init+0x350>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f ae78 	bne.w	8002268 <HAL_GPIO_Init+0x10>
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	48000400 	.word	0x48000400
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00
 800259c:	48001000 	.word	0x48001000
 80025a0:	48001400 	.word	0x48001400
 80025a4:	48001800 	.word	0x48001800
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40007000 	.word	0x40007000

080025f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002606:	d130      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002614:	d038      	beq.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2232      	movs	r2, #50	; 0x32
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9b      	lsrs	r3, r3, #18
 8002638:	3301      	adds	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263c:	e002      	b.n	8002644 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3b01      	subs	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002650:	d102      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f2      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002664:	d110      	bne.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e00f      	b.n	800268a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002676:	d007      	beq.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002680:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002686:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000
 800269c:	20000000 	.word	0x20000000
 80026a0:	431bde83 	.word	0x431bde83

080026a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e3ca      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b6:	4b97      	ldr	r3, [pc, #604]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c0:	4b94      	ldr	r3, [pc, #592]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80e4 	beq.w	80028a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_RCC_OscConfig+0x4a>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	f040 808b 	bne.w	80027fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 8087 	bne.w	80027fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	4b89      	ldr	r3, [pc, #548]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e3a2      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	4b82      	ldr	r3, [pc, #520]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_RCC_OscConfig+0x7c>
 8002716:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271e:	e005      	b.n	800272c <HAL_RCC_OscConfig+0x88>
 8002720:	4b7c      	ldr	r3, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	4293      	cmp	r3, r2
 800272e:	d223      	bcs.n	8002778 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fd55 	bl	80031e4 <RCC_SetFlashLatencyFromMSIRange>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e383      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002744:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a72      	ldr	r2, [pc, #456]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	496d      	ldr	r1, [pc, #436]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002762:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	4968      	ldr	r1, [pc, #416]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
 8002776:	e025      	b.n	80027c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002778:	4b66      	ldr	r3, [pc, #408]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4960      	ldr	r1, [pc, #384]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	495b      	ldr	r1, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd15 	bl	80031e4 <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e343      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c4:	f000 fc4a 	bl	800305c <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b52      	ldr	r3, [pc, #328]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	4950      	ldr	r1, [pc, #320]	; (8002918 <HAL_RCC_OscConfig+0x274>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	4a4e      	ldr	r2, [pc, #312]	; (800291c <HAL_RCC_OscConfig+0x278>)
 80027e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCC_OscConfig+0x27c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fa83 	bl	8000cf4 <HAL_InitTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d052      	beq.n	800289e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	e327      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d032      	beq.n	800286a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a42      	ldr	r2, [pc, #264]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002810:	f7fe fac0 	bl	8000d94 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002818:	f7fe fabc 	bl	8000d94 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e310      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002836:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4931      	ldr	r1, [pc, #196]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	492c      	ldr	r1, [pc, #176]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e01a      	b.n	80028a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002876:	f7fe fa8d 	bl	8000d94 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800287e:	f7fe fa89 	bl	8000d94 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e2dd      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x1da>
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d074      	beq.n	8002996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x21a>
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d10e      	bne.n	80028d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d064      	beq.n	8002994 <HAL_RCC_OscConfig+0x2f0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d160      	bne.n	8002994 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e2ba      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x24a>
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e026      	b.n	800293c <HAL_RCC_OscConfig+0x298>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f6:	d115      	bne.n	8002924 <HAL_RCC_OscConfig+0x280>
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a05      	ldr	r2, [pc, #20]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a02      	ldr	r2, [pc, #8]	; (8002914 <HAL_RCC_OscConfig+0x270>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e014      	b.n	800293c <HAL_RCC_OscConfig+0x298>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	080055f4 	.word	0x080055f4
 800291c:	20000000 	.word	0x20000000
 8002920:	20000004 	.word	0x20000004
 8002924:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a9f      	ldr	r2, [pc, #636]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a9c      	ldr	r2, [pc, #624]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fa26 	bl	8000d94 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7fe fa22 	bl	8000d94 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e276      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	4b92      	ldr	r3, [pc, #584]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x2a8>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fa12 	bl	8000d94 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe fa0e 	bl	8000d94 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e262      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x2d0>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d060      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x310>
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d116      	bne.n	80029e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b4:	4b7c      	ldr	r3, [pc, #496]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0x328>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e23f      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	4973      	ldr	r1, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	e040      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d023      	beq.n	8002a32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ea:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6e      	ldr	r2, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe f9cd 	bl	8000d94 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe f9c9 	bl	8000d94 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e21d      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a10:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	495f      	ldr	r1, [pc, #380]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
 8002a30:	e018      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5c      	ldr	r2, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe f9a9 	bl	8000d94 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe f9a5 	bl	8000d94 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1f9      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d03c      	beq.n	8002aea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a78:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f984 	bl	8000d94 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe f980 	bl	8000d94 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1d4      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ef      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3ec>
 8002ab0:	e01b      	b.n	8002aea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f967 	bl	8000d94 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe f963 	bl	8000d94 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1b7      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ef      	bne.n	8002aca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80a6 	beq.w	8002c44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b12:	6593      	str	r3, [r2, #88]	; 0x58
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b20:	2301      	movs	r3, #1
 8002b22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d118      	bne.n	8002b62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe f92a 	bl	8000d94 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7fe f926 	bl	8000d94 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e17a      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_RCC_OscConfig+0x508>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4d8>
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b7a:	e029      	b.n	8002bd0 <HAL_RCC_OscConfig+0x52c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d115      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x50c>
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a03      	ldr	r2, [pc, #12]	; (8002ba8 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x52c>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	4b9c      	ldr	r3, [pc, #624]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a9b      	ldr	r2, [pc, #620]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc0:	4b98      	ldr	r3, [pc, #608]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	4a97      	ldr	r2, [pc, #604]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe f8dc 	bl	8000d94 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe f8d8 	bl	8000d94 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e12a      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ed      	beq.n	8002be0 <HAL_RCC_OscConfig+0x53c>
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c06:	f7fe f8c5 	bl	8000d94 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe f8c1 	bl	8000d94 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e113      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c24:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ed      	bne.n	8002c0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c32:	7ffb      	ldrb	r3, [r7, #31]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	4a79      	ldr	r2, [pc, #484]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80fe 	beq.w	8002e4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f040 80d0 	bne.w	8002df8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c58:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d130      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	3b01      	subs	r3, #1
 8002c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d127      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d11f      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c98:	2a07      	cmp	r2, #7
 8002c9a:	bf14      	ite	ne
 8002c9c:	2201      	movne	r2, #1
 8002c9e:	2200      	moveq	r2, #0
 8002ca0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d06e      	beq.n	8002dac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d069      	beq.n	8002da8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cd4:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ce0:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0ad      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cfc:	f7fe f84a 	bl	8000d94 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe f846 	bl	8000d94 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e09a      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d16:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d22:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_OscConfig+0x784>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d3c:	0212      	lsls	r2, r2, #8
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d44:	0852      	lsrs	r2, r2, #1
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0552      	lsls	r2, r2, #21
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0652      	lsls	r2, r2, #25
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d5c:	0912      	lsrs	r2, r2, #4
 8002d5e:	0452      	lsls	r2, r2, #17
 8002d60:	430a      	orrs	r2, r1
 8002d62:	4930      	ldr	r1, [pc, #192]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d68:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d80:	f7fe f808 	bl	8000d94 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f804 	bl	8000d94 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e058      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da6:	e050      	b.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e04f      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d148      	bne.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd0:	f7fd ffe0 	bl	8000d94 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fd ffdc 	bl	8000d94 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e030      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x734>
 8002df6:	e028      	b.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d023      	beq.n	8002e46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RCC_OscConfig+0x780>)
 8002e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fd ffc3 	bl	8000d94 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e10:	e00c      	b.n	8002e2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fd ffbf 	bl	8000d94 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d905      	bls.n	8002e2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e013      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_OscConfig+0x7b0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ec      	bne.n	8002e12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_OscConfig+0x7b0>)
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	4905      	ldr	r1, [pc, #20]	; (8002e54 <HAL_RCC_OscConfig+0x7b0>)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x7b4>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
 8002e44:	e001      	b.n	8002e4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	feeefffc 	.word	0xfeeefffc

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0e7      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b72      	ldr	r3, [pc, #456]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	4970      	ldr	r1, [pc, #448]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b6e      	ldr	r3, [pc, #440]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0cf      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d908      	bls.n	8002ece <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4960      	ldr	r1, [pc, #384]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04c      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	4b5a      	ldr	r3, [pc, #360]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0a6      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e09a      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	4b4e      	ldr	r3, [pc, #312]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e08e      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e086      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b46      	ldr	r3, [pc, #280]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4943      	ldr	r1, [pc, #268]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fd ff26 	bl	8000d94 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fd ff22 	bl	8000d94 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e06e      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d208      	bcs.n	8002fa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	492b      	ldr	r1, [pc, #172]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d210      	bcs.n	8002fd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 0207 	bic.w	r2, r3, #7
 8002fb8:	4923      	ldr	r1, [pc, #140]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e036      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4918      	ldr	r1, [pc, #96]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4910      	ldr	r1, [pc, #64]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003010:	f000 f824 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	490b      	ldr	r1, [pc, #44]	; (8003050 <HAL_RCC_ClockConfig+0x1f4>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1f8>)
 800302e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1fc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fe5d 	bl	8000cf4 <HAL_InitTick>
 800303a:	4603      	mov	r3, r0
 800303c:	72fb      	strb	r3, [r7, #11]

  return status;
 800303e:	7afb      	ldrb	r3, [r7, #11]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
 8003050:	080055f4 	.word	0x080055f4
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306a:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x34>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d121      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d11e      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003090:	4b34      	ldr	r3, [pc, #208]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800309c:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e005      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d102      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_RCC_GetSysClockFreq+0x110>)
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	e004      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d134      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0xa6>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d003      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0xac>
 8003100:	e005      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCC_GetSysClockFreq+0x110>)
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCC_GetSysClockFreq+0x114>)
 800310a:	617b      	str	r3, [r7, #20]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	617b      	str	r3, [r7, #20]
      break;
 8003112:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	3301      	adds	r3, #1
 8003120:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	fb03 f202 	mul.w	r2, r3, r2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	0e5b      	lsrs	r3, r3, #25
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003154:	69bb      	ldr	r3, [r7, #24]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	; 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	0800560c 	.word	0x0800560c
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200

08003174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08005604 	.word	0x08005604

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031bc:	f7ff ffda 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0adb      	lsrs	r3, r3, #11
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08005604 	.word	0x08005604

080031e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031f0:	4b2a      	ldr	r3, [pc, #168]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031fc:	f7ff f9ee 	bl	80025dc <HAL_PWREx_GetVoltageRange>
 8003200:	6178      	str	r0, [r7, #20]
 8003202:	e014      	b.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4a24      	ldr	r2, [pc, #144]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800321c:	f7ff f9de 	bl	80025dc <HAL_PWREx_GetVoltageRange>
 8003220:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	4a1d      	ldr	r2, [pc, #116]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d10b      	bne.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d919      	bls.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2ba0      	cmp	r3, #160	; 0xa0
 8003240:	d902      	bls.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003242:	2302      	movs	r3, #2
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e013      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003248:	2301      	movs	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e010      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d902      	bls.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003254:	2303      	movs	r3, #3
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e00a      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d102      	bne.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003260:	2302      	movs	r3, #2
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e004      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d101      	bne.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800326c:	2301      	movs	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 0207 	bic.w	r2, r3, #7
 8003278:	4909      	ldr	r1, [pc, #36]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	429a      	cmp	r2, r3
 800328c:	d001      	beq.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	40022000 	.word	0x40022000

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032ac:	2300      	movs	r3, #0
 80032ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d041      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032c8:	d02a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ce:	d824      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032da:	d81e      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e4:	d010      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032e6:	e018      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032e8:	4b86      	ldr	r3, [pc, #536]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a85      	ldr	r2, [pc, #532]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f4:	e015      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fabb 	bl	8003878 <RCCEx_PLLSAI1_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003306:	e00c      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3320      	adds	r3, #32
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fba6 	bl	8003a60 <RCCEx_PLLSAI2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	74fb      	strb	r3, [r7, #19]
      break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003328:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003336:	4973      	ldr	r1, [pc, #460]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800333e:	e001      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d041      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003354:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003358:	d02a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800335a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800335e:	d824      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003364:	d008      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336a:	d81e      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003374:	d010      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003376:	e018      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003378:	4b62      	ldr	r3, [pc, #392]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003384:	e015      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fa73 	bl	8003878 <RCCEx_PLLSAI1_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003396:	e00c      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3320      	adds	r3, #32
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fb5e 	bl	8003a60 <RCCEx_PLLSAI2_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	74fb      	strb	r3, [r7, #19]
      break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033b8:	4b52      	ldr	r3, [pc, #328]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c6:	494f      	ldr	r1, [pc, #316]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ce:	e001      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a0 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	4a40      	ldr	r2, [pc, #256]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	6593      	str	r3, [r2, #88]	; 0x58
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003414:	2301      	movs	r3, #1
 8003416:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003424:	f7fd fcb6 	bl	8000d94 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342a:	e009      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fd fcb2 	bl	8000d94 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d902      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	74fb      	strb	r3, [r7, #19]
        break;
 800343e:	e005      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d15c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01f      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	429a      	cmp	r2, r3
 800346e:	d019      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4a20      	ldr	r2, [pc, #128]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fc71 	bl	8000d94 <HAL_GetTick>
 80034b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b4:	e00b      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fd fc6d 	bl	8000d94 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d902      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	74fb      	strb	r3, [r7, #19]
            break;
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ec      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	4904      	ldr	r1, [pc, #16]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034fa:	e009      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003510:	7c7b      	ldrb	r3, [r7, #17]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b9e      	ldr	r3, [pc, #632]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a9d      	ldr	r2, [pc, #628]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800352e:	4b98      	ldr	r3, [pc, #608]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 0203 	bic.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	4994      	ldr	r1, [pc, #592]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003550:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 020c 	bic.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	498c      	ldr	r1, [pc, #560]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003572:	4b87      	ldr	r3, [pc, #540]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4983      	ldr	r1, [pc, #524]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003594:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	497b      	ldr	r1, [pc, #492]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	4972      	ldr	r1, [pc, #456]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035d8:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	496a      	ldr	r1, [pc, #424]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	4961      	ldr	r1, [pc, #388]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800361c:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	4959      	ldr	r1, [pc, #356]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363e:	4b54      	ldr	r3, [pc, #336]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	4950      	ldr	r1, [pc, #320]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003660:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	4948      	ldr	r1, [pc, #288]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	493f      	ldr	r1, [pc, #252]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d028      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b2:	4937      	ldr	r1, [pc, #220]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
 80036d0:	e011      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036da:	d10c      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8c8 	bl	8003878 <RCCEx_PLLSAI1_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	491f      	ldr	r1, [pc, #124]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003720:	d106      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372c:	60d3      	str	r3, [r2, #12]
 800372e:	e011      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f899 	bl	8003878 <RCCEx_PLLSAI1_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02b      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376e:	4908      	ldr	r1, [pc, #32]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800377e:	d109      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a02      	ldr	r2, [pc, #8]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378a:	60d3      	str	r3, [r2, #12]
 800378c:	e014      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f867 	bl	8003878 <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02f      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	4928      	ldr	r1, [pc, #160]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e2:	d10d      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f844 	bl	8003878 <RCCEx_PLLSAI1_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	74bb      	strb	r3, [r7, #18]
 80037fe:	e011      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3320      	adds	r3, #32
 800380e:	2102      	movs	r1, #2
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f925 	bl	8003a60 <RCCEx_PLLSAI2_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383e:	490d      	ldr	r1, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800386a:	7cbb      	ldrb	r3, [r7, #18]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000

08003878 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003886:	4b75      	ldr	r3, [pc, #468]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003892:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0203 	and.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d10d      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
       ||
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038aa:	4b6c      	ldr	r3, [pc, #432]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
       ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d047      	beq.n	800394e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	e044      	b.n	800394e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d018      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0x86>
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d825      	bhi.n	800391c <RCCEx_PLLSAI1_Config+0xa4>
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d002      	beq.n	80038da <RCCEx_PLLSAI1_Config+0x62>
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d009      	beq.n	80038ec <RCCEx_PLLSAI1_Config+0x74>
 80038d8:	e020      	b.n	800391c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038da:	4b60      	ldr	r3, [pc, #384]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11d      	bne.n	8003922 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ea:	e01a      	b.n	8003922 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ec:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d116      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fc:	e013      	b.n	8003926 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038fe:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800390a:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800391a:	e006      	b.n	800392a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e004      	b.n	800392c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392a:	bf00      	nop
    }

    if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003932:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	430b      	orrs	r3, r1
 8003948:	4944      	ldr	r1, [pc, #272]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d17d      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003954:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fd fa18 	bl	8000d94 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003966:	e009      	b.n	800397c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003968:	f7fd fa14 	bl	8000d94 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d902      	bls.n	800397c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	73fb      	strb	r3, [r7, #15]
        break;
 800397a:	e005      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800397c:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ef      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d160      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003994:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	0211      	lsls	r1, r2, #8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	0912      	lsrs	r2, r2, #4
 80039ac:	0452      	lsls	r2, r2, #17
 80039ae:	430a      	orrs	r2, r1
 80039b0:	492a      	ldr	r1, [pc, #168]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	610b      	str	r3, [r1, #16]
 80039b6:	e027      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d112      	bne.n	80039e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039be:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	0211      	lsls	r1, r2, #8
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6912      	ldr	r2, [r2, #16]
 80039d4:	0852      	lsrs	r2, r2, #1
 80039d6:	3a01      	subs	r2, #1
 80039d8:	0552      	lsls	r2, r2, #21
 80039da:	430a      	orrs	r2, r1
 80039dc:	491f      	ldr	r1, [pc, #124]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]
 80039e2:	e011      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6952      	ldr	r2, [r2, #20]
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0652      	lsls	r2, r2, #25
 8003a00:	430a      	orrs	r2, r1
 8003a02:	4916      	ldr	r1, [pc, #88]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd f9be 	bl	8000d94 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1c:	f7fd f9ba 	bl	8000d94 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a2e:	e005      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ef      	beq.n	8003a1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	4904      	ldr	r1, [pc, #16]	; (8003a5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a7a:	4b67      	ldr	r3, [pc, #412]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10d      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a92:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d047      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	e044      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d018      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0x86>
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d825      	bhi.n	8003b04 <RCCEx_PLLSAI2_Config+0xa4>
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d002      	beq.n	8003ac2 <RCCEx_PLLSAI2_Config+0x62>
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d009      	beq.n	8003ad4 <RCCEx_PLLSAI2_Config+0x74>
 8003ac0:	e020      	b.n	8003b04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac2:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11d      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad2:	e01a      	b.n	8003b0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d116      	bne.n	8003b0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae4:	e013      	b.n	8003b0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae6:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b02:	e006      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      break;
 8003b08:	e004      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	4939      	ldr	r1, [pc, #228]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d167      	bne.n	8003c0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fd f924 	bl	8000d94 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b4e:	e009      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b50:	f7fd f920 	bl	8000d94 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
        break;
 8003b62:	e005      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b64:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ef      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d14a      	bne.n	8003c0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d111      	bne.n	8003ba0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b7c:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	0912      	lsrs	r2, r2, #4
 8003b94:	0452      	lsls	r2, r2, #17
 8003b96:	430a      	orrs	r2, r1
 8003b98:	491f      	ldr	r1, [pc, #124]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	614b      	str	r3, [r1, #20]
 8003b9e:	e011      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	0211      	lsls	r1, r2, #8
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6912      	ldr	r2, [r2, #16]
 8003bb6:	0852      	lsrs	r2, r2, #1
 8003bb8:	3a01      	subs	r2, #1
 8003bba:	0652      	lsls	r2, r2, #25
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	4916      	ldr	r1, [pc, #88]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f8e0 	bl	8000d94 <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bd6:	e009      	b.n	8003bec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd8:	f7fd f8dc 	bl	8000d94 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d902      	bls.n	8003bec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bea:	e005      	b.n	8003bf8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4904      	ldr	r1, [pc, #16]	; (8003c18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e040      	b.n	8003cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fc fed2 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fb6a 	bl	800433c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8af 	bl	8003dcc <UART_SetConfig>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e01b      	b.n	8003cb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fbe9 	bl	8004480 <UART_CheckIdleState>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d178      	bne.n	8003dc2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Transmit+0x24>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e071      	b.n	8003dc4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2221      	movs	r2, #33	; 0x21
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd f851 	bl	8000d94 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d108      	bne.n	8003d20 <HAL_UART_Transmit+0x68>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d28:	e030      	b.n	8003d8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fc4b 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e03c      	b.n	8003dc4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3302      	adds	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e008      	b.n	8003d7a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	b292      	uxth	r2, r2
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1c8      	bne.n	8003d2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fc14 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e005      	b.n	8003dc4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b08a      	sub	sp, #40	; 0x28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4ba4      	ldr	r3, [pc, #656]	; (800408c <UART_SetConfig+0x2c0>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a99      	ldr	r2, [pc, #612]	; (8004090 <UART_SetConfig+0x2c4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	4313      	orrs	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a90      	ldr	r2, [pc, #576]	; (8004094 <UART_SetConfig+0x2c8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d126      	bne.n	8003ea4 <UART_SetConfig+0xd8>
 8003e56:	4b90      	ldr	r3, [pc, #576]	; (8004098 <UART_SetConfig+0x2cc>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d81b      	bhi.n	8003e9c <UART_SetConfig+0xd0>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <UART_SetConfig+0xa0>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e8d 	.word	0x08003e8d
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e95 	.word	0x08003e95
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e116      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e84:	2302      	movs	r3, #2
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e112      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e92:	e10e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e94:	2308      	movs	r3, #8
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9a:	e10a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e106      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7c      	ldr	r2, [pc, #496]	; (800409c <UART_SetConfig+0x2d0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d138      	bne.n	8003f20 <UART_SetConfig+0x154>
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <UART_SetConfig+0x2cc>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b0c      	cmp	r3, #12
 8003eba:	d82d      	bhi.n	8003f18 <UART_SetConfig+0x14c>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0xf8>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ef9 	.word	0x08003ef9
 8003ec8:	08003f19 	.word	0x08003f19
 8003ecc:	08003f19 	.word	0x08003f19
 8003ed0:	08003f19 	.word	0x08003f19
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f19 	.word	0x08003f19
 8003edc:	08003f19 	.word	0x08003f19
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f01 	.word	0x08003f01
 8003ee8:	08003f19 	.word	0x08003f19
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e0d8      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e0d4      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e0d0      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f10:	2308      	movs	r3, #8
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e0cc      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e0c8      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5e      	ldr	r2, [pc, #376]	; (80040a0 <UART_SetConfig+0x2d4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d125      	bne.n	8003f76 <UART_SetConfig+0x1aa>
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <UART_SetConfig+0x2cc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d016      	beq.n	8003f66 <UART_SetConfig+0x19a>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d818      	bhi.n	8003f6e <UART_SetConfig+0x1a2>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d00a      	beq.n	8003f56 <UART_SetConfig+0x18a>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d814      	bhi.n	8003f6e <UART_SetConfig+0x1a2>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <UART_SetConfig+0x182>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d008      	beq.n	8003f5e <UART_SetConfig+0x192>
 8003f4c:	e00f      	b.n	8003f6e <UART_SetConfig+0x1a2>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f54:	e0ad      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f56:	2302      	movs	r3, #2
 8003f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5c:	e0a9      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f64:	e0a5      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f66:	2308      	movs	r3, #8
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6c:	e0a1      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f6e:	2310      	movs	r3, #16
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f74:	e09d      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4a      	ldr	r2, [pc, #296]	; (80040a4 <UART_SetConfig+0x2d8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d125      	bne.n	8003fcc <UART_SetConfig+0x200>
 8003f80:	4b45      	ldr	r3, [pc, #276]	; (8004098 <UART_SetConfig+0x2cc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f8c:	d016      	beq.n	8003fbc <UART_SetConfig+0x1f0>
 8003f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f90:	d818      	bhi.n	8003fc4 <UART_SetConfig+0x1f8>
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d00a      	beq.n	8003fac <UART_SetConfig+0x1e0>
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d814      	bhi.n	8003fc4 <UART_SetConfig+0x1f8>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <UART_SetConfig+0x1d8>
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d008      	beq.n	8003fb4 <UART_SetConfig+0x1e8>
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x1f8>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003faa:	e082      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fac:	2302      	movs	r3, #2
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb2:	e07e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fba:	e07a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e076      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e072      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a35      	ldr	r2, [pc, #212]	; (80040a8 <UART_SetConfig+0x2dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d12a      	bne.n	800402c <UART_SetConfig+0x260>
 8003fd6:	4b30      	ldr	r3, [pc, #192]	; (8004098 <UART_SetConfig+0x2cc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe4:	d01a      	beq.n	800401c <UART_SetConfig+0x250>
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fea:	d81b      	bhi.n	8004024 <UART_SetConfig+0x258>
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff0:	d00c      	beq.n	800400c <UART_SetConfig+0x240>
 8003ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff6:	d815      	bhi.n	8004024 <UART_SetConfig+0x258>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <UART_SetConfig+0x238>
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d008      	beq.n	8004014 <UART_SetConfig+0x248>
 8004002:	e00f      	b.n	8004024 <UART_SetConfig+0x258>
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400a:	e052      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800400c:	2302      	movs	r3, #2
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004012:	e04e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004014:	2304      	movs	r3, #4
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401a:	e04a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800401c:	2308      	movs	r3, #8
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004022:	e046      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004024:	2310      	movs	r3, #16
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402a:	e042      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a17      	ldr	r2, [pc, #92]	; (8004090 <UART_SetConfig+0x2c4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d13a      	bne.n	80040ac <UART_SetConfig+0x2e0>
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <UART_SetConfig+0x2cc>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004044:	d01a      	beq.n	800407c <UART_SetConfig+0x2b0>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d81b      	bhi.n	8004084 <UART_SetConfig+0x2b8>
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004050:	d00c      	beq.n	800406c <UART_SetConfig+0x2a0>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d815      	bhi.n	8004084 <UART_SetConfig+0x2b8>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <UART_SetConfig+0x298>
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004060:	d008      	beq.n	8004074 <UART_SetConfig+0x2a8>
 8004062:	e00f      	b.n	8004084 <UART_SetConfig+0x2b8>
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406a:	e022      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004072:	e01e      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407a:	e01a      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004082:	e016      	b.n	80040b2 <UART_SetConfig+0x2e6>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e012      	b.n	80040b2 <UART_SetConfig+0x2e6>
 800408c:	efff69f3 	.word	0xefff69f3
 8004090:	40008000 	.word	0x40008000
 8004094:	40013800 	.word	0x40013800
 8004098:	40021000 	.word	0x40021000
 800409c:	40004400 	.word	0x40004400
 80040a0:	40004800 	.word	0x40004800
 80040a4:	40004c00 	.word	0x40004c00
 80040a8:	40005000 	.word	0x40005000
 80040ac:	2310      	movs	r3, #16
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a9f      	ldr	r2, [pc, #636]	; (8004334 <UART_SetConfig+0x568>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d17a      	bne.n	80041b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d824      	bhi.n	800410e <UART_SetConfig+0x342>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0x300>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	0800410f 	.word	0x0800410f
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	0800410f 	.word	0x0800410f
 80040dc:	080040ff 	.word	0x080040ff
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800410f 	.word	0x0800410f
 80040ec:	08004107 	.word	0x08004107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7ff f84c 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80040f4:	61f8      	str	r0, [r7, #28]
        break;
 80040f6:	e010      	b.n	800411a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b8f      	ldr	r3, [pc, #572]	; (8004338 <UART_SetConfig+0x56c>)
 80040fa:	61fb      	str	r3, [r7, #28]
        break;
 80040fc:	e00d      	b.n	800411a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fe:	f7fe ffad 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004102:	61f8      	str	r0, [r7, #28]
        break;
 8004104:	e009      	b.n	800411a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800410a:	61fb      	str	r3, [r7, #28]
        break;
 800410c:	e005      	b.n	800411a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80fb 	beq.w	8004318 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d305      	bcc.n	800413e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	429a      	cmp	r2, r3
 800413c:	d903      	bls.n	8004146 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004144:	e0e8      	b.n	8004318 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2200      	movs	r2, #0
 800414a:	461c      	mov	r4, r3
 800414c:	4615      	mov	r5, r2
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	022b      	lsls	r3, r5, #8
 8004158:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800415c:	0222      	lsls	r2, r4, #8
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	6849      	ldr	r1, [r1, #4]
 8004162:	0849      	lsrs	r1, r1, #1
 8004164:	2000      	movs	r0, #0
 8004166:	4688      	mov	r8, r1
 8004168:	4681      	mov	r9, r0
 800416a:	eb12 0a08 	adds.w	sl, r2, r8
 800416e:	eb43 0b09 	adc.w	fp, r3, r9
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004180:	4650      	mov	r0, sl
 8004182:	4659      	mov	r1, fp
 8004184:	f7fc f874 	bl	8000270 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004196:	d308      	bcc.n	80041aa <UART_SetConfig+0x3de>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d204      	bcs.n	80041aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	60da      	str	r2, [r3, #12]
 80041a8:	e0b6      	b.n	8004318 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041b0:	e0b2      	b.n	8004318 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	d15e      	bne.n	800427a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d828      	bhi.n	8004216 <UART_SetConfig+0x44a>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x400>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe ffcc 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80041f4:	61f8      	str	r0, [r7, #28]
        break;
 80041f6:	e014      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7fe ffde 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 80041fc:	61f8      	str	r0, [r7, #28]
        break;
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b4d      	ldr	r3, [pc, #308]	; (8004338 <UART_SetConfig+0x56c>)
 8004202:	61fb      	str	r3, [r7, #28]
        break;
 8004204:	e00d      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7fe ff29 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800420a:	61f8      	str	r0, [r7, #28]
        break;
 800420c:	e009      	b.n	8004222 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d077      	beq.n	8004318 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005a      	lsls	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	441a      	add	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0f      	cmp	r3, #15
 8004242:	d916      	bls.n	8004272 <UART_SetConfig+0x4a6>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424a:	d212      	bcs.n	8004272 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f023 030f 	bic.w	r3, r3, #15
 8004254:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	b29b      	uxth	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	b29a      	uxth	r2, r3
 8004262:	8afb      	ldrh	r3, [r7, #22]
 8004264:	4313      	orrs	r3, r2
 8004266:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	8afa      	ldrh	r2, [r7, #22]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	e052      	b.n	8004318 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004278:	e04e      	b.n	8004318 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800427a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800427e:	2b08      	cmp	r3, #8
 8004280:	d827      	bhi.n	80042d2 <UART_SetConfig+0x506>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x4bc>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042bd 	.word	0x080042bd
 8004294:	080042d3 	.word	0x080042d3
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042d3 	.word	0x080042d3
 80042a0:	080042d3 	.word	0x080042d3
 80042a4:	080042d3 	.word	0x080042d3
 80042a8:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe ff6e 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80042b0:	61f8      	str	r0, [r7, #28]
        break;
 80042b2:	e014      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7fe ff80 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 80042b8:	61f8      	str	r0, [r7, #28]
        break;
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <UART_SetConfig+0x56c>)
 80042be:	61fb      	str	r3, [r7, #28]
        break;
 80042c0:	e00d      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fe fecb 	bl	800305c <HAL_RCC_GetSysClockFreq>
 80042c6:	61f8      	str	r0, [r7, #28]
        break;
 80042c8:	e009      	b.n	80042de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ce:	61fb      	str	r3, [r7, #28]
        break;
 80042d0:	e005      	b.n	80042de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042dc:	bf00      	nop
    }

    if (pclk != 0U)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d019      	beq.n	8004318 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	085a      	lsrs	r2, r3, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0f      	cmp	r3, #15
 80042fc:	d909      	bls.n	8004312 <UART_SetConfig+0x546>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d205      	bcs.n	8004312 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e002      	b.n	8004318 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004324:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	; 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004332:	bf00      	nop
 8004334:	40008000 	.word	0x40008000
 8004338:	00f42400 	.word	0x00f42400

0800433c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01a      	beq.n	8004452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443a:	d10a      	bne.n	8004452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b098      	sub	sp, #96	; 0x60
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004490:	f7fc fc80 	bl	8000d94 <HAL_GetTick>
 8004494:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d12e      	bne.n	8004502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ac:	2200      	movs	r2, #0
 80044ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f88c 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d021      	beq.n	8004502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d2:	653b      	str	r3, [r7, #80]	; 0x50
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
 80044de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e062      	b.n	80045c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d149      	bne.n	80045a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004518:	2200      	movs	r2, #0
 800451a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f856 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03c      	beq.n	80045a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	623b      	str	r3, [r7, #32]
   return(result);
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 800454a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60fb      	str	r3, [r7, #12]
   return(result);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	617b      	str	r3, [r7, #20]
   return(result);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e011      	b.n	80045c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3758      	adds	r7, #88	; 0x58
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	e049      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d045      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fc fbd3 	bl	8000d94 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e048      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d031      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d110      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2208      	movs	r2, #8
 8004626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f838 	bl	800469e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2208      	movs	r2, #8
 8004632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e029      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004650:	d111      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800465a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f81e 	bl	800469e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e00f      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d0a6      	beq.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800469e:	b480      	push	{r7}
 80046a0:	b095      	sub	sp, #84	; 0x54
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	643b      	str	r3, [r7, #64]	; 0x40
 80046c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	2b01      	cmp	r3, #1
 8004712:	d118      	bne.n	8004746 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	60bb      	str	r3, [r7, #8]
   return(result);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f023 0310 	bic.w	r3, r3, #16
 8004728:	647b      	str	r3, [r7, #68]	; 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6979      	ldr	r1, [r7, #20]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	613b      	str	r3, [r7, #16]
   return(result);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e6      	bne.n	8004714 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	669a      	str	r2, [r3, #104]	; 0x68
}
 800475a:	bf00      	nop
 800475c:	3754      	adds	r7, #84	; 0x54
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <std>:
 8004768:	2300      	movs	r3, #0
 800476a:	b510      	push	{r4, lr}
 800476c:	4604      	mov	r4, r0
 800476e:	e9c0 3300 	strd	r3, r3, [r0]
 8004772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004776:	6083      	str	r3, [r0, #8]
 8004778:	8181      	strh	r1, [r0, #12]
 800477a:	6643      	str	r3, [r0, #100]	; 0x64
 800477c:	81c2      	strh	r2, [r0, #14]
 800477e:	6183      	str	r3, [r0, #24]
 8004780:	4619      	mov	r1, r3
 8004782:	2208      	movs	r2, #8
 8004784:	305c      	adds	r0, #92	; 0x5c
 8004786:	f000 f8f4 	bl	8004972 <memset>
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <std+0x38>)
 800478c:	6263      	str	r3, [r4, #36]	; 0x24
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <std+0x3c>)
 8004790:	62a3      	str	r3, [r4, #40]	; 0x28
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <std+0x40>)
 8004794:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <std+0x44>)
 8004798:	6224      	str	r4, [r4, #32]
 800479a:	6323      	str	r3, [r4, #48]	; 0x30
 800479c:	bd10      	pop	{r4, pc}
 800479e:	bf00      	nop
 80047a0:	080048ed 	.word	0x080048ed
 80047a4:	0800490f 	.word	0x0800490f
 80047a8:	08004947 	.word	0x08004947
 80047ac:	0800496b 	.word	0x0800496b

080047b0 <stdio_exit_handler>:
 80047b0:	4a02      	ldr	r2, [pc, #8]	; (80047bc <stdio_exit_handler+0xc>)
 80047b2:	4903      	ldr	r1, [pc, #12]	; (80047c0 <stdio_exit_handler+0x10>)
 80047b4:	4803      	ldr	r0, [pc, #12]	; (80047c4 <stdio_exit_handler+0x14>)
 80047b6:	f000 b869 	b.w	800488c <_fwalk_sglue>
 80047ba:	bf00      	nop
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	0800530d 	.word	0x0800530d
 80047c4:	20000018 	.word	0x20000018

080047c8 <cleanup_stdio>:
 80047c8:	6841      	ldr	r1, [r0, #4]
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <cleanup_stdio+0x34>)
 80047cc:	4299      	cmp	r1, r3
 80047ce:	b510      	push	{r4, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	d001      	beq.n	80047d8 <cleanup_stdio+0x10>
 80047d4:	f000 fd9a 	bl	800530c <_fflush_r>
 80047d8:	68a1      	ldr	r1, [r4, #8]
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <cleanup_stdio+0x38>)
 80047dc:	4299      	cmp	r1, r3
 80047de:	d002      	beq.n	80047e6 <cleanup_stdio+0x1e>
 80047e0:	4620      	mov	r0, r4
 80047e2:	f000 fd93 	bl	800530c <_fflush_r>
 80047e6:	68e1      	ldr	r1, [r4, #12]
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <cleanup_stdio+0x3c>)
 80047ea:	4299      	cmp	r1, r3
 80047ec:	d004      	beq.n	80047f8 <cleanup_stdio+0x30>
 80047ee:	4620      	mov	r0, r4
 80047f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f4:	f000 bd8a 	b.w	800530c <_fflush_r>
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	bf00      	nop
 80047fc:	2000017c 	.word	0x2000017c
 8004800:	200001e4 	.word	0x200001e4
 8004804:	2000024c 	.word	0x2000024c

08004808 <global_stdio_init.part.0>:
 8004808:	b510      	push	{r4, lr}
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <global_stdio_init.part.0+0x30>)
 800480c:	4c0b      	ldr	r4, [pc, #44]	; (800483c <global_stdio_init.part.0+0x34>)
 800480e:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <global_stdio_init.part.0+0x38>)
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	4620      	mov	r0, r4
 8004814:	2200      	movs	r2, #0
 8004816:	2104      	movs	r1, #4
 8004818:	f7ff ffa6 	bl	8004768 <std>
 800481c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004820:	2201      	movs	r2, #1
 8004822:	2109      	movs	r1, #9
 8004824:	f7ff ffa0 	bl	8004768 <std>
 8004828:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800482c:	2202      	movs	r2, #2
 800482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004832:	2112      	movs	r1, #18
 8004834:	f7ff bf98 	b.w	8004768 <std>
 8004838:	200002b4 	.word	0x200002b4
 800483c:	2000017c 	.word	0x2000017c
 8004840:	080047b1 	.word	0x080047b1

08004844 <__sfp_lock_acquire>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__sfp_lock_acquire+0x8>)
 8004846:	f000 b90d 	b.w	8004a64 <__retarget_lock_acquire_recursive>
 800484a:	bf00      	nop
 800484c:	200002bd 	.word	0x200002bd

08004850 <__sfp_lock_release>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__sfp_lock_release+0x8>)
 8004852:	f000 b908 	b.w	8004a66 <__retarget_lock_release_recursive>
 8004856:	bf00      	nop
 8004858:	200002bd 	.word	0x200002bd

0800485c <__sinit>:
 800485c:	b510      	push	{r4, lr}
 800485e:	4604      	mov	r4, r0
 8004860:	f7ff fff0 	bl	8004844 <__sfp_lock_acquire>
 8004864:	6a23      	ldr	r3, [r4, #32]
 8004866:	b11b      	cbz	r3, 8004870 <__sinit+0x14>
 8004868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800486c:	f7ff bff0 	b.w	8004850 <__sfp_lock_release>
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <__sinit+0x28>)
 8004872:	6223      	str	r3, [r4, #32]
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <__sinit+0x2c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f5      	bne.n	8004868 <__sinit+0xc>
 800487c:	f7ff ffc4 	bl	8004808 <global_stdio_init.part.0>
 8004880:	e7f2      	b.n	8004868 <__sinit+0xc>
 8004882:	bf00      	nop
 8004884:	080047c9 	.word	0x080047c9
 8004888:	200002b4 	.word	0x200002b4

0800488c <_fwalk_sglue>:
 800488c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004890:	4607      	mov	r7, r0
 8004892:	4688      	mov	r8, r1
 8004894:	4614      	mov	r4, r2
 8004896:	2600      	movs	r6, #0
 8004898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800489c:	f1b9 0901 	subs.w	r9, r9, #1
 80048a0:	d505      	bpl.n	80048ae <_fwalk_sglue+0x22>
 80048a2:	6824      	ldr	r4, [r4, #0]
 80048a4:	2c00      	cmp	r4, #0
 80048a6:	d1f7      	bne.n	8004898 <_fwalk_sglue+0xc>
 80048a8:	4630      	mov	r0, r6
 80048aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d907      	bls.n	80048c4 <_fwalk_sglue+0x38>
 80048b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048b8:	3301      	adds	r3, #1
 80048ba:	d003      	beq.n	80048c4 <_fwalk_sglue+0x38>
 80048bc:	4629      	mov	r1, r5
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	4306      	orrs	r6, r0
 80048c4:	3568      	adds	r5, #104	; 0x68
 80048c6:	e7e9      	b.n	800489c <_fwalk_sglue+0x10>

080048c8 <iprintf>:
 80048c8:	b40f      	push	{r0, r1, r2, r3}
 80048ca:	b507      	push	{r0, r1, r2, lr}
 80048cc:	4906      	ldr	r1, [pc, #24]	; (80048e8 <iprintf+0x20>)
 80048ce:	ab04      	add	r3, sp, #16
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d6:	6881      	ldr	r1, [r0, #8]
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	f000 f9e7 	bl	8004cac <_vfiprintf_r>
 80048de:	b003      	add	sp, #12
 80048e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e4:	b004      	add	sp, #16
 80048e6:	4770      	bx	lr
 80048e8:	20000064 	.word	0x20000064

080048ec <__sread>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	460c      	mov	r4, r1
 80048f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f4:	f000 f868 	bl	80049c8 <_read_r>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	bfab      	itete	ge
 80048fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004900:	181b      	addge	r3, r3, r0
 8004902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004906:	bfac      	ite	ge
 8004908:	6563      	strge	r3, [r4, #84]	; 0x54
 800490a:	81a3      	strhlt	r3, [r4, #12]
 800490c:	bd10      	pop	{r4, pc}

0800490e <__swrite>:
 800490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	461f      	mov	r7, r3
 8004914:	898b      	ldrh	r3, [r1, #12]
 8004916:	05db      	lsls	r3, r3, #23
 8004918:	4605      	mov	r5, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4616      	mov	r6, r2
 800491e:	d505      	bpl.n	800492c <__swrite+0x1e>
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	2302      	movs	r3, #2
 8004926:	2200      	movs	r2, #0
 8004928:	f000 f83c 	bl	80049a4 <_lseek_r>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	4632      	mov	r2, r6
 800493a:	463b      	mov	r3, r7
 800493c:	4628      	mov	r0, r5
 800493e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004942:	f000 b853 	b.w	80049ec <_write_r>

08004946 <__sseek>:
 8004946:	b510      	push	{r4, lr}
 8004948:	460c      	mov	r4, r1
 800494a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494e:	f000 f829 	bl	80049a4 <_lseek_r>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	bf15      	itete	ne
 8004958:	6560      	strne	r0, [r4, #84]	; 0x54
 800495a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800495e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004962:	81a3      	strheq	r3, [r4, #12]
 8004964:	bf18      	it	ne
 8004966:	81a3      	strhne	r3, [r4, #12]
 8004968:	bd10      	pop	{r4, pc}

0800496a <__sclose>:
 800496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496e:	f000 b809 	b.w	8004984 <_close_r>

08004972 <memset>:
 8004972:	4402      	add	r2, r0
 8004974:	4603      	mov	r3, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	d100      	bne.n	800497c <memset+0xa>
 800497a:	4770      	bx	lr
 800497c:	f803 1b01 	strb.w	r1, [r3], #1
 8004980:	e7f9      	b.n	8004976 <memset+0x4>
	...

08004984 <_close_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4d06      	ldr	r5, [pc, #24]	; (80049a0 <_close_r+0x1c>)
 8004988:	2300      	movs	r3, #0
 800498a:	4604      	mov	r4, r0
 800498c:	4608      	mov	r0, r1
 800498e:	602b      	str	r3, [r5, #0]
 8004990:	f7fc f8e9 	bl	8000b66 <_close>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_close_r+0x1a>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b103      	cbz	r3, 800499e <_close_r+0x1a>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	200002b8 	.word	0x200002b8

080049a4 <_lseek_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4d07      	ldr	r5, [pc, #28]	; (80049c4 <_lseek_r+0x20>)
 80049a8:	4604      	mov	r4, r0
 80049aa:	4608      	mov	r0, r1
 80049ac:	4611      	mov	r1, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	602a      	str	r2, [r5, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f7fc f8fe 	bl	8000bb4 <_lseek>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d102      	bne.n	80049c2 <_lseek_r+0x1e>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	b103      	cbz	r3, 80049c2 <_lseek_r+0x1e>
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	200002b8 	.word	0x200002b8

080049c8 <_read_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d07      	ldr	r5, [pc, #28]	; (80049e8 <_read_r+0x20>)
 80049cc:	4604      	mov	r4, r0
 80049ce:	4608      	mov	r0, r1
 80049d0:	4611      	mov	r1, r2
 80049d2:	2200      	movs	r2, #0
 80049d4:	602a      	str	r2, [r5, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f7fc f88c 	bl	8000af4 <_read>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_read_r+0x1e>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_read_r+0x1e>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	200002b8 	.word	0x200002b8

080049ec <_write_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d07      	ldr	r5, [pc, #28]	; (8004a0c <_write_r+0x20>)
 80049f0:	4604      	mov	r4, r0
 80049f2:	4608      	mov	r0, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	602a      	str	r2, [r5, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f7fc f897 	bl	8000b2e <_write>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_write_r+0x1e>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_write_r+0x1e>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	200002b8 	.word	0x200002b8

08004a10 <__errno>:
 8004a10:	4b01      	ldr	r3, [pc, #4]	; (8004a18 <__errno+0x8>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000064 	.word	0x20000064

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4d0d      	ldr	r5, [pc, #52]	; (8004a54 <__libc_init_array+0x38>)
 8004a20:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	2600      	movs	r6, #0
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4d0b      	ldr	r5, [pc, #44]	; (8004a5c <__libc_init_array+0x40>)
 8004a2e:	4c0c      	ldr	r4, [pc, #48]	; (8004a60 <__libc_init_array+0x44>)
 8004a30:	f000 fdbe 	bl	80055b0 <_init>
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08005678 	.word	0x08005678
 8004a58:	08005678 	.word	0x08005678
 8004a5c:	08005678 	.word	0x08005678
 8004a60:	0800567c 	.word	0x0800567c

08004a64 <__retarget_lock_acquire_recursive>:
 8004a64:	4770      	bx	lr

08004a66 <__retarget_lock_release_recursive>:
 8004a66:	4770      	bx	lr

08004a68 <_free_r>:
 8004a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	d044      	beq.n	8004af8 <_free_r+0x90>
 8004a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a72:	9001      	str	r0, [sp, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f1a1 0404 	sub.w	r4, r1, #4
 8004a7a:	bfb8      	it	lt
 8004a7c:	18e4      	addlt	r4, r4, r3
 8004a7e:	f000 f8df 	bl	8004c40 <__malloc_lock>
 8004a82:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <_free_r+0x94>)
 8004a84:	9801      	ldr	r0, [sp, #4]
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	b933      	cbnz	r3, 8004a98 <_free_r+0x30>
 8004a8a:	6063      	str	r3, [r4, #4]
 8004a8c:	6014      	str	r4, [r2, #0]
 8004a8e:	b003      	add	sp, #12
 8004a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a94:	f000 b8da 	b.w	8004c4c <__malloc_unlock>
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	d908      	bls.n	8004aae <_free_r+0x46>
 8004a9c:	6825      	ldr	r5, [r4, #0]
 8004a9e:	1961      	adds	r1, r4, r5
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf01      	itttt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	1949      	addeq	r1, r1, r5
 8004aaa:	6021      	streq	r1, [r4, #0]
 8004aac:	e7ed      	b.n	8004a8a <_free_r+0x22>
 8004aae:	461a      	mov	r2, r3
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_free_r+0x50>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d9fa      	bls.n	8004aae <_free_r+0x46>
 8004ab8:	6811      	ldr	r1, [r2, #0]
 8004aba:	1855      	adds	r5, r2, r1
 8004abc:	42a5      	cmp	r5, r4
 8004abe:	d10b      	bne.n	8004ad8 <_free_r+0x70>
 8004ac0:	6824      	ldr	r4, [r4, #0]
 8004ac2:	4421      	add	r1, r4
 8004ac4:	1854      	adds	r4, r2, r1
 8004ac6:	42a3      	cmp	r3, r4
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	d1e0      	bne.n	8004a8e <_free_r+0x26>
 8004acc:	681c      	ldr	r4, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	6053      	str	r3, [r2, #4]
 8004ad2:	440c      	add	r4, r1
 8004ad4:	6014      	str	r4, [r2, #0]
 8004ad6:	e7da      	b.n	8004a8e <_free_r+0x26>
 8004ad8:	d902      	bls.n	8004ae0 <_free_r+0x78>
 8004ada:	230c      	movs	r3, #12
 8004adc:	6003      	str	r3, [r0, #0]
 8004ade:	e7d6      	b.n	8004a8e <_free_r+0x26>
 8004ae0:	6825      	ldr	r5, [r4, #0]
 8004ae2:	1961      	adds	r1, r4, r5
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	bf04      	itt	eq
 8004ae8:	6819      	ldreq	r1, [r3, #0]
 8004aea:	685b      	ldreq	r3, [r3, #4]
 8004aec:	6063      	str	r3, [r4, #4]
 8004aee:	bf04      	itt	eq
 8004af0:	1949      	addeq	r1, r1, r5
 8004af2:	6021      	streq	r1, [r4, #0]
 8004af4:	6054      	str	r4, [r2, #4]
 8004af6:	e7ca      	b.n	8004a8e <_free_r+0x26>
 8004af8:	b003      	add	sp, #12
 8004afa:	bd30      	pop	{r4, r5, pc}
 8004afc:	200002c0 	.word	0x200002c0

08004b00 <sbrk_aligned>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4e0e      	ldr	r6, [pc, #56]	; (8004b3c <sbrk_aligned+0x3c>)
 8004b04:	460c      	mov	r4, r1
 8004b06:	6831      	ldr	r1, [r6, #0]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	b911      	cbnz	r1, 8004b12 <sbrk_aligned+0x12>
 8004b0c:	f000 fcbc 	bl	8005488 <_sbrk_r>
 8004b10:	6030      	str	r0, [r6, #0]
 8004b12:	4621      	mov	r1, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 fcb7 	bl	8005488 <_sbrk_r>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d00a      	beq.n	8004b34 <sbrk_aligned+0x34>
 8004b1e:	1cc4      	adds	r4, r0, #3
 8004b20:	f024 0403 	bic.w	r4, r4, #3
 8004b24:	42a0      	cmp	r0, r4
 8004b26:	d007      	beq.n	8004b38 <sbrk_aligned+0x38>
 8004b28:	1a21      	subs	r1, r4, r0
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 fcac 	bl	8005488 <_sbrk_r>
 8004b30:	3001      	adds	r0, #1
 8004b32:	d101      	bne.n	8004b38 <sbrk_aligned+0x38>
 8004b34:	f04f 34ff 	mov.w	r4, #4294967295
 8004b38:	4620      	mov	r0, r4
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	200002c4 	.word	0x200002c4

08004b40 <_malloc_r>:
 8004b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b44:	1ccd      	adds	r5, r1, #3
 8004b46:	f025 0503 	bic.w	r5, r5, #3
 8004b4a:	3508      	adds	r5, #8
 8004b4c:	2d0c      	cmp	r5, #12
 8004b4e:	bf38      	it	cc
 8004b50:	250c      	movcc	r5, #12
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	4607      	mov	r7, r0
 8004b56:	db01      	blt.n	8004b5c <_malloc_r+0x1c>
 8004b58:	42a9      	cmp	r1, r5
 8004b5a:	d905      	bls.n	8004b68 <_malloc_r+0x28>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	2600      	movs	r6, #0
 8004b62:	4630      	mov	r0, r6
 8004b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c3c <_malloc_r+0xfc>
 8004b6c:	f000 f868 	bl	8004c40 <__malloc_lock>
 8004b70:	f8d8 3000 	ldr.w	r3, [r8]
 8004b74:	461c      	mov	r4, r3
 8004b76:	bb5c      	cbnz	r4, 8004bd0 <_malloc_r+0x90>
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f7ff ffc0 	bl	8004b00 <sbrk_aligned>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	4604      	mov	r4, r0
 8004b84:	d155      	bne.n	8004c32 <_malloc_r+0xf2>
 8004b86:	f8d8 4000 	ldr.w	r4, [r8]
 8004b8a:	4626      	mov	r6, r4
 8004b8c:	2e00      	cmp	r6, #0
 8004b8e:	d145      	bne.n	8004c1c <_malloc_r+0xdc>
 8004b90:	2c00      	cmp	r4, #0
 8004b92:	d048      	beq.n	8004c26 <_malloc_r+0xe6>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	4631      	mov	r1, r6
 8004b98:	4638      	mov	r0, r7
 8004b9a:	eb04 0903 	add.w	r9, r4, r3
 8004b9e:	f000 fc73 	bl	8005488 <_sbrk_r>
 8004ba2:	4581      	cmp	r9, r0
 8004ba4:	d13f      	bne.n	8004c26 <_malloc_r+0xe6>
 8004ba6:	6821      	ldr	r1, [r4, #0]
 8004ba8:	1a6d      	subs	r5, r5, r1
 8004baa:	4629      	mov	r1, r5
 8004bac:	4638      	mov	r0, r7
 8004bae:	f7ff ffa7 	bl	8004b00 <sbrk_aligned>
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d037      	beq.n	8004c26 <_malloc_r+0xe6>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	442b      	add	r3, r5
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d038      	beq.n	8004c36 <_malloc_r+0xf6>
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	42a2      	cmp	r2, r4
 8004bc8:	d12b      	bne.n	8004c22 <_malloc_r+0xe2>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e00f      	b.n	8004bf0 <_malloc_r+0xb0>
 8004bd0:	6822      	ldr	r2, [r4, #0]
 8004bd2:	1b52      	subs	r2, r2, r5
 8004bd4:	d41f      	bmi.n	8004c16 <_malloc_r+0xd6>
 8004bd6:	2a0b      	cmp	r2, #11
 8004bd8:	d917      	bls.n	8004c0a <_malloc_r+0xca>
 8004bda:	1961      	adds	r1, r4, r5
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	6025      	str	r5, [r4, #0]
 8004be0:	bf18      	it	ne
 8004be2:	6059      	strne	r1, [r3, #4]
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	bf08      	it	eq
 8004be8:	f8c8 1000 	streq.w	r1, [r8]
 8004bec:	5162      	str	r2, [r4, r5]
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f104 060b 	add.w	r6, r4, #11
 8004bf6:	f000 f829 	bl	8004c4c <__malloc_unlock>
 8004bfa:	f026 0607 	bic.w	r6, r6, #7
 8004bfe:	1d23      	adds	r3, r4, #4
 8004c00:	1af2      	subs	r2, r6, r3
 8004c02:	d0ae      	beq.n	8004b62 <_malloc_r+0x22>
 8004c04:	1b9b      	subs	r3, r3, r6
 8004c06:	50a3      	str	r3, [r4, r2]
 8004c08:	e7ab      	b.n	8004b62 <_malloc_r+0x22>
 8004c0a:	42a3      	cmp	r3, r4
 8004c0c:	6862      	ldr	r2, [r4, #4]
 8004c0e:	d1dd      	bne.n	8004bcc <_malloc_r+0x8c>
 8004c10:	f8c8 2000 	str.w	r2, [r8]
 8004c14:	e7ec      	b.n	8004bf0 <_malloc_r+0xb0>
 8004c16:	4623      	mov	r3, r4
 8004c18:	6864      	ldr	r4, [r4, #4]
 8004c1a:	e7ac      	b.n	8004b76 <_malloc_r+0x36>
 8004c1c:	4634      	mov	r4, r6
 8004c1e:	6876      	ldr	r6, [r6, #4]
 8004c20:	e7b4      	b.n	8004b8c <_malloc_r+0x4c>
 8004c22:	4613      	mov	r3, r2
 8004c24:	e7cc      	b.n	8004bc0 <_malloc_r+0x80>
 8004c26:	230c      	movs	r3, #12
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f000 f80e 	bl	8004c4c <__malloc_unlock>
 8004c30:	e797      	b.n	8004b62 <_malloc_r+0x22>
 8004c32:	6025      	str	r5, [r4, #0]
 8004c34:	e7dc      	b.n	8004bf0 <_malloc_r+0xb0>
 8004c36:	605b      	str	r3, [r3, #4]
 8004c38:	deff      	udf	#255	; 0xff
 8004c3a:	bf00      	nop
 8004c3c:	200002c0 	.word	0x200002c0

08004c40 <__malloc_lock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__malloc_lock+0x8>)
 8004c42:	f7ff bf0f 	b.w	8004a64 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	200002bc 	.word	0x200002bc

08004c4c <__malloc_unlock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__malloc_unlock+0x8>)
 8004c4e:	f7ff bf0a 	b.w	8004a66 <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	200002bc 	.word	0x200002bc

08004c58 <__sfputc_r>:
 8004c58:	6893      	ldr	r3, [r2, #8]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	b410      	push	{r4}
 8004c60:	6093      	str	r3, [r2, #8]
 8004c62:	da08      	bge.n	8004c76 <__sfputc_r+0x1e>
 8004c64:	6994      	ldr	r4, [r2, #24]
 8004c66:	42a3      	cmp	r3, r4
 8004c68:	db01      	blt.n	8004c6e <__sfputc_r+0x16>
 8004c6a:	290a      	cmp	r1, #10
 8004c6c:	d103      	bne.n	8004c76 <__sfputc_r+0x1e>
 8004c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c72:	f000 bb73 	b.w	800535c <__swbuf_r>
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	1c58      	adds	r0, r3, #1
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	7019      	strb	r1, [r3, #0]
 8004c7e:	4608      	mov	r0, r1
 8004c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <__sfputs_r>:
 8004c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c88:	4606      	mov	r6, r0
 8004c8a:	460f      	mov	r7, r1
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	18d5      	adds	r5, r2, r3
 8004c90:	42ac      	cmp	r4, r5
 8004c92:	d101      	bne.n	8004c98 <__sfputs_r+0x12>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e007      	b.n	8004ca8 <__sfputs_r+0x22>
 8004c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9c:	463a      	mov	r2, r7
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f7ff ffda 	bl	8004c58 <__sfputc_r>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d1f3      	bne.n	8004c90 <__sfputs_r+0xa>
 8004ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cac <_vfiprintf_r>:
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	b09d      	sub	sp, #116	; 0x74
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	4698      	mov	r8, r3
 8004cb8:	4606      	mov	r6, r0
 8004cba:	b118      	cbz	r0, 8004cc4 <_vfiprintf_r+0x18>
 8004cbc:	6a03      	ldr	r3, [r0, #32]
 8004cbe:	b90b      	cbnz	r3, 8004cc4 <_vfiprintf_r+0x18>
 8004cc0:	f7ff fdcc 	bl	800485c <__sinit>
 8004cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc6:	07d9      	lsls	r1, r3, #31
 8004cc8:	d405      	bmi.n	8004cd6 <_vfiprintf_r+0x2a>
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	059a      	lsls	r2, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_vfiprintf_r+0x2a>
 8004cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd2:	f7ff fec7 	bl	8004a64 <__retarget_lock_acquire_recursive>
 8004cd6:	89ab      	ldrh	r3, [r5, #12]
 8004cd8:	071b      	lsls	r3, r3, #28
 8004cda:	d501      	bpl.n	8004ce0 <_vfiprintf_r+0x34>
 8004cdc:	692b      	ldr	r3, [r5, #16]
 8004cde:	b99b      	cbnz	r3, 8004d08 <_vfiprintf_r+0x5c>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 fb78 	bl	80053d8 <__swsetup_r>
 8004ce8:	b170      	cbz	r0, 8004d08 <_vfiprintf_r+0x5c>
 8004cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cec:	07dc      	lsls	r4, r3, #31
 8004cee:	d504      	bpl.n	8004cfa <_vfiprintf_r+0x4e>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	b01d      	add	sp, #116	; 0x74
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	0598      	lsls	r0, r3, #22
 8004cfe:	d4f7      	bmi.n	8004cf0 <_vfiprintf_r+0x44>
 8004d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d02:	f7ff feb0 	bl	8004a66 <__retarget_lock_release_recursive>
 8004d06:	e7f3      	b.n	8004cf0 <_vfiprintf_r+0x44>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d16:	2330      	movs	r3, #48	; 0x30
 8004d18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004ecc <_vfiprintf_r+0x220>
 8004d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d20:	f04f 0901 	mov.w	r9, #1
 8004d24:	4623      	mov	r3, r4
 8004d26:	469a      	mov	sl, r3
 8004d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d2c:	b10a      	cbz	r2, 8004d32 <_vfiprintf_r+0x86>
 8004d2e:	2a25      	cmp	r2, #37	; 0x25
 8004d30:	d1f9      	bne.n	8004d26 <_vfiprintf_r+0x7a>
 8004d32:	ebba 0b04 	subs.w	fp, sl, r4
 8004d36:	d00b      	beq.n	8004d50 <_vfiprintf_r+0xa4>
 8004d38:	465b      	mov	r3, fp
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7ff ffa1 	bl	8004c86 <__sfputs_r>
 8004d44:	3001      	adds	r0, #1
 8004d46:	f000 80a9 	beq.w	8004e9c <_vfiprintf_r+0x1f0>
 8004d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4c:	445a      	add	r2, fp
 8004d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004d50:	f89a 3000 	ldrb.w	r3, [sl]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80a1 	beq.w	8004e9c <_vfiprintf_r+0x1f0>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d64:	f10a 0a01 	add.w	sl, sl, #1
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	9307      	str	r3, [sp, #28]
 8004d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d70:	931a      	str	r3, [sp, #104]	; 0x68
 8004d72:	4654      	mov	r4, sl
 8004d74:	2205      	movs	r2, #5
 8004d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d7a:	4854      	ldr	r0, [pc, #336]	; (8004ecc <_vfiprintf_r+0x220>)
 8004d7c:	f7fb fa28 	bl	80001d0 <memchr>
 8004d80:	9a04      	ldr	r2, [sp, #16]
 8004d82:	b9d8      	cbnz	r0, 8004dbc <_vfiprintf_r+0x110>
 8004d84:	06d1      	lsls	r1, r2, #27
 8004d86:	bf44      	itt	mi
 8004d88:	2320      	movmi	r3, #32
 8004d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8e:	0713      	lsls	r3, r2, #28
 8004d90:	bf44      	itt	mi
 8004d92:	232b      	movmi	r3, #43	; 0x2b
 8004d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d98:	f89a 3000 	ldrb.w	r3, [sl]
 8004d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9e:	d015      	beq.n	8004dcc <_vfiprintf_r+0x120>
 8004da0:	9a07      	ldr	r2, [sp, #28]
 8004da2:	4654      	mov	r4, sl
 8004da4:	2000      	movs	r0, #0
 8004da6:	f04f 0c0a 	mov.w	ip, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db0:	3b30      	subs	r3, #48	; 0x30
 8004db2:	2b09      	cmp	r3, #9
 8004db4:	d94d      	bls.n	8004e52 <_vfiprintf_r+0x1a6>
 8004db6:	b1b0      	cbz	r0, 8004de6 <_vfiprintf_r+0x13a>
 8004db8:	9207      	str	r2, [sp, #28]
 8004dba:	e014      	b.n	8004de6 <_vfiprintf_r+0x13a>
 8004dbc:	eba0 0308 	sub.w	r3, r0, r8
 8004dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	9304      	str	r3, [sp, #16]
 8004dc8:	46a2      	mov	sl, r4
 8004dca:	e7d2      	b.n	8004d72 <_vfiprintf_r+0xc6>
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	1d19      	adds	r1, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	9103      	str	r1, [sp, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bfbb      	ittet	lt
 8004dd8:	425b      	neglt	r3, r3
 8004dda:	f042 0202 	orrlt.w	r2, r2, #2
 8004dde:	9307      	strge	r3, [sp, #28]
 8004de0:	9307      	strlt	r3, [sp, #28]
 8004de2:	bfb8      	it	lt
 8004de4:	9204      	strlt	r2, [sp, #16]
 8004de6:	7823      	ldrb	r3, [r4, #0]
 8004de8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dea:	d10c      	bne.n	8004e06 <_vfiprintf_r+0x15a>
 8004dec:	7863      	ldrb	r3, [r4, #1]
 8004dee:	2b2a      	cmp	r3, #42	; 0x2a
 8004df0:	d134      	bne.n	8004e5c <_vfiprintf_r+0x1b0>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	9203      	str	r2, [sp, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfb8      	it	lt
 8004dfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e02:	3402      	adds	r4, #2
 8004e04:	9305      	str	r3, [sp, #20]
 8004e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004edc <_vfiprintf_r+0x230>
 8004e0a:	7821      	ldrb	r1, [r4, #0]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	4650      	mov	r0, sl
 8004e10:	f7fb f9de 	bl	80001d0 <memchr>
 8004e14:	b138      	cbz	r0, 8004e26 <_vfiprintf_r+0x17a>
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	eba0 000a 	sub.w	r0, r0, sl
 8004e1c:	2240      	movs	r2, #64	; 0x40
 8004e1e:	4082      	lsls	r2, r0
 8004e20:	4313      	orrs	r3, r2
 8004e22:	3401      	adds	r4, #1
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2a:	4829      	ldr	r0, [pc, #164]	; (8004ed0 <_vfiprintf_r+0x224>)
 8004e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e30:	2206      	movs	r2, #6
 8004e32:	f7fb f9cd 	bl	80001d0 <memchr>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d03f      	beq.n	8004eba <_vfiprintf_r+0x20e>
 8004e3a:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <_vfiprintf_r+0x228>)
 8004e3c:	bb1b      	cbnz	r3, 8004e86 <_vfiprintf_r+0x1da>
 8004e3e:	9b03      	ldr	r3, [sp, #12]
 8004e40:	3307      	adds	r3, #7
 8004e42:	f023 0307 	bic.w	r3, r3, #7
 8004e46:	3308      	adds	r3, #8
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	443b      	add	r3, r7
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	e768      	b.n	8004d24 <_vfiprintf_r+0x78>
 8004e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e56:	460c      	mov	r4, r1
 8004e58:	2001      	movs	r0, #1
 8004e5a:	e7a6      	b.n	8004daa <_vfiprintf_r+0xfe>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	3401      	adds	r4, #1
 8004e60:	9305      	str	r3, [sp, #20]
 8004e62:	4619      	mov	r1, r3
 8004e64:	f04f 0c0a 	mov.w	ip, #10
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e6e:	3a30      	subs	r2, #48	; 0x30
 8004e70:	2a09      	cmp	r2, #9
 8004e72:	d903      	bls.n	8004e7c <_vfiprintf_r+0x1d0>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0c6      	beq.n	8004e06 <_vfiprintf_r+0x15a>
 8004e78:	9105      	str	r1, [sp, #20]
 8004e7a:	e7c4      	b.n	8004e06 <_vfiprintf_r+0x15a>
 8004e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e80:	4604      	mov	r4, r0
 8004e82:	2301      	movs	r3, #1
 8004e84:	e7f0      	b.n	8004e68 <_vfiprintf_r+0x1bc>
 8004e86:	ab03      	add	r3, sp, #12
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	462a      	mov	r2, r5
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <_vfiprintf_r+0x22c>)
 8004e8e:	a904      	add	r1, sp, #16
 8004e90:	4630      	mov	r0, r6
 8004e92:	f3af 8000 	nop.w
 8004e96:	4607      	mov	r7, r0
 8004e98:	1c78      	adds	r0, r7, #1
 8004e9a:	d1d6      	bne.n	8004e4a <_vfiprintf_r+0x19e>
 8004e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e9e:	07d9      	lsls	r1, r3, #31
 8004ea0:	d405      	bmi.n	8004eae <_vfiprintf_r+0x202>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	059a      	lsls	r2, r3, #22
 8004ea6:	d402      	bmi.n	8004eae <_vfiprintf_r+0x202>
 8004ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eaa:	f7ff fddc 	bl	8004a66 <__retarget_lock_release_recursive>
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	065b      	lsls	r3, r3, #25
 8004eb2:	f53f af1d 	bmi.w	8004cf0 <_vfiprintf_r+0x44>
 8004eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eb8:	e71c      	b.n	8004cf4 <_vfiprintf_r+0x48>
 8004eba:	ab03      	add	r3, sp, #12
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <_vfiprintf_r+0x22c>)
 8004ec2:	a904      	add	r1, sp, #16
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f000 f879 	bl	8004fbc <_printf_i>
 8004eca:	e7e4      	b.n	8004e96 <_vfiprintf_r+0x1ea>
 8004ecc:	0800563c 	.word	0x0800563c
 8004ed0:	08005646 	.word	0x08005646
 8004ed4:	00000000 	.word	0x00000000
 8004ed8:	08004c87 	.word	0x08004c87
 8004edc:	08005642 	.word	0x08005642

08004ee0 <_printf_common>:
 8004ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	4699      	mov	r9, r3
 8004ee8:	688a      	ldr	r2, [r1, #8]
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bfb8      	it	lt
 8004ef4:	4613      	movlt	r3, r2
 8004ef6:	6033      	str	r3, [r6, #0]
 8004ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004efc:	4607      	mov	r7, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	b10a      	cbz	r2, 8004f06 <_printf_common+0x26>
 8004f02:	3301      	adds	r3, #1
 8004f04:	6033      	str	r3, [r6, #0]
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	0699      	lsls	r1, r3, #26
 8004f0a:	bf42      	ittt	mi
 8004f0c:	6833      	ldrmi	r3, [r6, #0]
 8004f0e:	3302      	addmi	r3, #2
 8004f10:	6033      	strmi	r3, [r6, #0]
 8004f12:	6825      	ldr	r5, [r4, #0]
 8004f14:	f015 0506 	ands.w	r5, r5, #6
 8004f18:	d106      	bne.n	8004f28 <_printf_common+0x48>
 8004f1a:	f104 0a19 	add.w	sl, r4, #25
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	6832      	ldr	r2, [r6, #0]
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	42ab      	cmp	r3, r5
 8004f26:	dc26      	bgt.n	8004f76 <_printf_common+0x96>
 8004f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f2c:	1e13      	subs	r3, r2, #0
 8004f2e:	6822      	ldr	r2, [r4, #0]
 8004f30:	bf18      	it	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	0692      	lsls	r2, r2, #26
 8004f36:	d42b      	bmi.n	8004f90 <_printf_common+0xb0>
 8004f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	4638      	mov	r0, r7
 8004f40:	47c0      	blx	r8
 8004f42:	3001      	adds	r0, #1
 8004f44:	d01e      	beq.n	8004f84 <_printf_common+0xa4>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	6922      	ldr	r2, [r4, #16]
 8004f4a:	f003 0306 	and.w	r3, r3, #6
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	bf02      	ittt	eq
 8004f52:	68e5      	ldreq	r5, [r4, #12]
 8004f54:	6833      	ldreq	r3, [r6, #0]
 8004f56:	1aed      	subeq	r5, r5, r3
 8004f58:	68a3      	ldr	r3, [r4, #8]
 8004f5a:	bf0c      	ite	eq
 8004f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f60:	2500      	movne	r5, #0
 8004f62:	4293      	cmp	r3, r2
 8004f64:	bfc4      	itt	gt
 8004f66:	1a9b      	subgt	r3, r3, r2
 8004f68:	18ed      	addgt	r5, r5, r3
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	341a      	adds	r4, #26
 8004f6e:	42b5      	cmp	r5, r6
 8004f70:	d11a      	bne.n	8004fa8 <_printf_common+0xc8>
 8004f72:	2000      	movs	r0, #0
 8004f74:	e008      	b.n	8004f88 <_printf_common+0xa8>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4652      	mov	r2, sl
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	47c0      	blx	r8
 8004f80:	3001      	adds	r0, #1
 8004f82:	d103      	bne.n	8004f8c <_printf_common+0xac>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	e7c6      	b.n	8004f1e <_printf_common+0x3e>
 8004f90:	18e1      	adds	r1, r4, r3
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	2030      	movs	r0, #48	; 0x30
 8004f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f9a:	4422      	add	r2, r4
 8004f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	e7c7      	b.n	8004f38 <_printf_common+0x58>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4622      	mov	r2, r4
 8004fac:	4649      	mov	r1, r9
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d0e6      	beq.n	8004f84 <_printf_common+0xa4>
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7d9      	b.n	8004f6e <_printf_common+0x8e>
	...

08004fbc <_printf_i>:
 8004fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	7e0f      	ldrb	r7, [r1, #24]
 8004fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fc4:	2f78      	cmp	r7, #120	; 0x78
 8004fc6:	4691      	mov	r9, r2
 8004fc8:	4680      	mov	r8, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	469a      	mov	sl, r3
 8004fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fd2:	d807      	bhi.n	8004fe4 <_printf_i+0x28>
 8004fd4:	2f62      	cmp	r7, #98	; 0x62
 8004fd6:	d80a      	bhi.n	8004fee <_printf_i+0x32>
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	f000 80d4 	beq.w	8005186 <_printf_i+0x1ca>
 8004fde:	2f58      	cmp	r7, #88	; 0x58
 8004fe0:	f000 80c0 	beq.w	8005164 <_printf_i+0x1a8>
 8004fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fec:	e03a      	b.n	8005064 <_printf_i+0xa8>
 8004fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ff2:	2b15      	cmp	r3, #21
 8004ff4:	d8f6      	bhi.n	8004fe4 <_printf_i+0x28>
 8004ff6:	a101      	add	r1, pc, #4	; (adr r1, 8004ffc <_printf_i+0x40>)
 8004ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005069 	.word	0x08005069
 8005004:	08004fe5 	.word	0x08004fe5
 8005008:	08004fe5 	.word	0x08004fe5
 800500c:	08004fe5 	.word	0x08004fe5
 8005010:	08004fe5 	.word	0x08004fe5
 8005014:	08005069 	.word	0x08005069
 8005018:	08004fe5 	.word	0x08004fe5
 800501c:	08004fe5 	.word	0x08004fe5
 8005020:	08004fe5 	.word	0x08004fe5
 8005024:	08004fe5 	.word	0x08004fe5
 8005028:	0800516d 	.word	0x0800516d
 800502c:	08005095 	.word	0x08005095
 8005030:	08005127 	.word	0x08005127
 8005034:	08004fe5 	.word	0x08004fe5
 8005038:	08004fe5 	.word	0x08004fe5
 800503c:	0800518f 	.word	0x0800518f
 8005040:	08004fe5 	.word	0x08004fe5
 8005044:	08005095 	.word	0x08005095
 8005048:	08004fe5 	.word	0x08004fe5
 800504c:	08004fe5 	.word	0x08004fe5
 8005050:	0800512f 	.word	0x0800512f
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	1d1a      	adds	r2, r3, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	602a      	str	r2, [r5, #0]
 800505c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005064:	2301      	movs	r3, #1
 8005066:	e09f      	b.n	80051a8 <_printf_i+0x1ec>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	0607      	lsls	r7, r0, #24
 800506e:	f103 0104 	add.w	r1, r3, #4
 8005072:	6029      	str	r1, [r5, #0]
 8005074:	d501      	bpl.n	800507a <_printf_i+0xbe>
 8005076:	681e      	ldr	r6, [r3, #0]
 8005078:	e003      	b.n	8005082 <_printf_i+0xc6>
 800507a:	0646      	lsls	r6, r0, #25
 800507c:	d5fb      	bpl.n	8005076 <_printf_i+0xba>
 800507e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005082:	2e00      	cmp	r6, #0
 8005084:	da03      	bge.n	800508e <_printf_i+0xd2>
 8005086:	232d      	movs	r3, #45	; 0x2d
 8005088:	4276      	negs	r6, r6
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508e:	485a      	ldr	r0, [pc, #360]	; (80051f8 <_printf_i+0x23c>)
 8005090:	230a      	movs	r3, #10
 8005092:	e012      	b.n	80050ba <_printf_i+0xfe>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	6029      	str	r1, [r5, #0]
 800509c:	0605      	lsls	r5, r0, #24
 800509e:	d501      	bpl.n	80050a4 <_printf_i+0xe8>
 80050a0:	681e      	ldr	r6, [r3, #0]
 80050a2:	e002      	b.n	80050aa <_printf_i+0xee>
 80050a4:	0641      	lsls	r1, r0, #25
 80050a6:	d5fb      	bpl.n	80050a0 <_printf_i+0xe4>
 80050a8:	881e      	ldrh	r6, [r3, #0]
 80050aa:	4853      	ldr	r0, [pc, #332]	; (80051f8 <_printf_i+0x23c>)
 80050ac:	2f6f      	cmp	r7, #111	; 0x6f
 80050ae:	bf0c      	ite	eq
 80050b0:	2308      	moveq	r3, #8
 80050b2:	230a      	movne	r3, #10
 80050b4:	2100      	movs	r1, #0
 80050b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ba:	6865      	ldr	r5, [r4, #4]
 80050bc:	60a5      	str	r5, [r4, #8]
 80050be:	2d00      	cmp	r5, #0
 80050c0:	bfa2      	ittt	ge
 80050c2:	6821      	ldrge	r1, [r4, #0]
 80050c4:	f021 0104 	bicge.w	r1, r1, #4
 80050c8:	6021      	strge	r1, [r4, #0]
 80050ca:	b90e      	cbnz	r6, 80050d0 <_printf_i+0x114>
 80050cc:	2d00      	cmp	r5, #0
 80050ce:	d04b      	beq.n	8005168 <_printf_i+0x1ac>
 80050d0:	4615      	mov	r5, r2
 80050d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80050d6:	fb03 6711 	mls	r7, r3, r1, r6
 80050da:	5dc7      	ldrb	r7, [r0, r7]
 80050dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e0:	4637      	mov	r7, r6
 80050e2:	42bb      	cmp	r3, r7
 80050e4:	460e      	mov	r6, r1
 80050e6:	d9f4      	bls.n	80050d2 <_printf_i+0x116>
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d10b      	bne.n	8005104 <_printf_i+0x148>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	07de      	lsls	r6, r3, #31
 80050f0:	d508      	bpl.n	8005104 <_printf_i+0x148>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	6861      	ldr	r1, [r4, #4]
 80050f6:	4299      	cmp	r1, r3
 80050f8:	bfde      	ittt	le
 80050fa:	2330      	movle	r3, #48	; 0x30
 80050fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005100:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005104:	1b52      	subs	r2, r2, r5
 8005106:	6122      	str	r2, [r4, #16]
 8005108:	f8cd a000 	str.w	sl, [sp]
 800510c:	464b      	mov	r3, r9
 800510e:	aa03      	add	r2, sp, #12
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fee4 	bl	8004ee0 <_printf_common>
 8005118:	3001      	adds	r0, #1
 800511a:	d14a      	bne.n	80051b2 <_printf_i+0x1f6>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	b004      	add	sp, #16
 8005122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f043 0320 	orr.w	r3, r3, #32
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	4833      	ldr	r0, [pc, #204]	; (80051fc <_printf_i+0x240>)
 8005130:	2778      	movs	r7, #120	; 0x78
 8005132:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	6829      	ldr	r1, [r5, #0]
 800513a:	061f      	lsls	r7, r3, #24
 800513c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005140:	d402      	bmi.n	8005148 <_printf_i+0x18c>
 8005142:	065f      	lsls	r7, r3, #25
 8005144:	bf48      	it	mi
 8005146:	b2b6      	uxthmi	r6, r6
 8005148:	07df      	lsls	r7, r3, #31
 800514a:	bf48      	it	mi
 800514c:	f043 0320 	orrmi.w	r3, r3, #32
 8005150:	6029      	str	r1, [r5, #0]
 8005152:	bf48      	it	mi
 8005154:	6023      	strmi	r3, [r4, #0]
 8005156:	b91e      	cbnz	r6, 8005160 <_printf_i+0x1a4>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	f023 0320 	bic.w	r3, r3, #32
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	2310      	movs	r3, #16
 8005162:	e7a7      	b.n	80050b4 <_printf_i+0xf8>
 8005164:	4824      	ldr	r0, [pc, #144]	; (80051f8 <_printf_i+0x23c>)
 8005166:	e7e4      	b.n	8005132 <_printf_i+0x176>
 8005168:	4615      	mov	r5, r2
 800516a:	e7bd      	b.n	80050e8 <_printf_i+0x12c>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	6826      	ldr	r6, [r4, #0]
 8005170:	6961      	ldr	r1, [r4, #20]
 8005172:	1d18      	adds	r0, r3, #4
 8005174:	6028      	str	r0, [r5, #0]
 8005176:	0635      	lsls	r5, r6, #24
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	d501      	bpl.n	8005180 <_printf_i+0x1c4>
 800517c:	6019      	str	r1, [r3, #0]
 800517e:	e002      	b.n	8005186 <_printf_i+0x1ca>
 8005180:	0670      	lsls	r0, r6, #25
 8005182:	d5fb      	bpl.n	800517c <_printf_i+0x1c0>
 8005184:	8019      	strh	r1, [r3, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	4615      	mov	r5, r2
 800518c:	e7bc      	b.n	8005108 <_printf_i+0x14c>
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	1d1a      	adds	r2, r3, #4
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	681d      	ldr	r5, [r3, #0]
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	2100      	movs	r1, #0
 800519a:	4628      	mov	r0, r5
 800519c:	f7fb f818 	bl	80001d0 <memchr>
 80051a0:	b108      	cbz	r0, 80051a6 <_printf_i+0x1ea>
 80051a2:	1b40      	subs	r0, r0, r5
 80051a4:	6060      	str	r0, [r4, #4]
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	2300      	movs	r3, #0
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b0:	e7aa      	b.n	8005108 <_printf_i+0x14c>
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	462a      	mov	r2, r5
 80051b6:	4649      	mov	r1, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	47d0      	blx	sl
 80051bc:	3001      	adds	r0, #1
 80051be:	d0ad      	beq.n	800511c <_printf_i+0x160>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	079b      	lsls	r3, r3, #30
 80051c4:	d413      	bmi.n	80051ee <_printf_i+0x232>
 80051c6:	68e0      	ldr	r0, [r4, #12]
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	4298      	cmp	r0, r3
 80051cc:	bfb8      	it	lt
 80051ce:	4618      	movlt	r0, r3
 80051d0:	e7a6      	b.n	8005120 <_printf_i+0x164>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4632      	mov	r2, r6
 80051d6:	4649      	mov	r1, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	47d0      	blx	sl
 80051dc:	3001      	adds	r0, #1
 80051de:	d09d      	beq.n	800511c <_printf_i+0x160>
 80051e0:	3501      	adds	r5, #1
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	9903      	ldr	r1, [sp, #12]
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	dcf2      	bgt.n	80051d2 <_printf_i+0x216>
 80051ec:	e7eb      	b.n	80051c6 <_printf_i+0x20a>
 80051ee:	2500      	movs	r5, #0
 80051f0:	f104 0619 	add.w	r6, r4, #25
 80051f4:	e7f5      	b.n	80051e2 <_printf_i+0x226>
 80051f6:	bf00      	nop
 80051f8:	0800564d 	.word	0x0800564d
 80051fc:	0800565e 	.word	0x0800565e

08005200 <__sflush_r>:
 8005200:	898a      	ldrh	r2, [r1, #12]
 8005202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	0710      	lsls	r0, r2, #28
 800520a:	460c      	mov	r4, r1
 800520c:	d458      	bmi.n	80052c0 <__sflush_r+0xc0>
 800520e:	684b      	ldr	r3, [r1, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc05      	bgt.n	8005220 <__sflush_r+0x20>
 8005214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	dc02      	bgt.n	8005220 <__sflush_r+0x20>
 800521a:	2000      	movs	r0, #0
 800521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005222:	2e00      	cmp	r6, #0
 8005224:	d0f9      	beq.n	800521a <__sflush_r+0x1a>
 8005226:	2300      	movs	r3, #0
 8005228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800522c:	682f      	ldr	r7, [r5, #0]
 800522e:	6a21      	ldr	r1, [r4, #32]
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	d032      	beq.n	800529a <__sflush_r+0x9a>
 8005234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	075a      	lsls	r2, r3, #29
 800523a:	d505      	bpl.n	8005248 <__sflush_r+0x48>
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	1ac0      	subs	r0, r0, r3
 8005240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005242:	b10b      	cbz	r3, 8005248 <__sflush_r+0x48>
 8005244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005246:	1ac0      	subs	r0, r0, r3
 8005248:	2300      	movs	r3, #0
 800524a:	4602      	mov	r2, r0
 800524c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800524e:	6a21      	ldr	r1, [r4, #32]
 8005250:	4628      	mov	r0, r5
 8005252:	47b0      	blx	r6
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	d106      	bne.n	8005268 <__sflush_r+0x68>
 800525a:	6829      	ldr	r1, [r5, #0]
 800525c:	291d      	cmp	r1, #29
 800525e:	d82b      	bhi.n	80052b8 <__sflush_r+0xb8>
 8005260:	4a29      	ldr	r2, [pc, #164]	; (8005308 <__sflush_r+0x108>)
 8005262:	410a      	asrs	r2, r1
 8005264:	07d6      	lsls	r6, r2, #31
 8005266:	d427      	bmi.n	80052b8 <__sflush_r+0xb8>
 8005268:	2200      	movs	r2, #0
 800526a:	6062      	str	r2, [r4, #4]
 800526c:	04d9      	lsls	r1, r3, #19
 800526e:	6922      	ldr	r2, [r4, #16]
 8005270:	6022      	str	r2, [r4, #0]
 8005272:	d504      	bpl.n	800527e <__sflush_r+0x7e>
 8005274:	1c42      	adds	r2, r0, #1
 8005276:	d101      	bne.n	800527c <__sflush_r+0x7c>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b903      	cbnz	r3, 800527e <__sflush_r+0x7e>
 800527c:	6560      	str	r0, [r4, #84]	; 0x54
 800527e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005280:	602f      	str	r7, [r5, #0]
 8005282:	2900      	cmp	r1, #0
 8005284:	d0c9      	beq.n	800521a <__sflush_r+0x1a>
 8005286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800528a:	4299      	cmp	r1, r3
 800528c:	d002      	beq.n	8005294 <__sflush_r+0x94>
 800528e:	4628      	mov	r0, r5
 8005290:	f7ff fbea 	bl	8004a68 <_free_r>
 8005294:	2000      	movs	r0, #0
 8005296:	6360      	str	r0, [r4, #52]	; 0x34
 8005298:	e7c0      	b.n	800521c <__sflush_r+0x1c>
 800529a:	2301      	movs	r3, #1
 800529c:	4628      	mov	r0, r5
 800529e:	47b0      	blx	r6
 80052a0:	1c41      	adds	r1, r0, #1
 80052a2:	d1c8      	bne.n	8005236 <__sflush_r+0x36>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0c5      	beq.n	8005236 <__sflush_r+0x36>
 80052aa:	2b1d      	cmp	r3, #29
 80052ac:	d001      	beq.n	80052b2 <__sflush_r+0xb2>
 80052ae:	2b16      	cmp	r3, #22
 80052b0:	d101      	bne.n	80052b6 <__sflush_r+0xb6>
 80052b2:	602f      	str	r7, [r5, #0]
 80052b4:	e7b1      	b.n	800521a <__sflush_r+0x1a>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	e7ad      	b.n	800521c <__sflush_r+0x1c>
 80052c0:	690f      	ldr	r7, [r1, #16]
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	d0a9      	beq.n	800521a <__sflush_r+0x1a>
 80052c6:	0793      	lsls	r3, r2, #30
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	bf08      	it	eq
 80052cc:	694b      	ldreq	r3, [r1, #20]
 80052ce:	600f      	str	r7, [r1, #0]
 80052d0:	bf18      	it	ne
 80052d2:	2300      	movne	r3, #0
 80052d4:	eba6 0807 	sub.w	r8, r6, r7
 80052d8:	608b      	str	r3, [r1, #8]
 80052da:	f1b8 0f00 	cmp.w	r8, #0
 80052de:	dd9c      	ble.n	800521a <__sflush_r+0x1a>
 80052e0:	6a21      	ldr	r1, [r4, #32]
 80052e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052e4:	4643      	mov	r3, r8
 80052e6:	463a      	mov	r2, r7
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b0      	blx	r6
 80052ec:	2800      	cmp	r0, #0
 80052ee:	dc06      	bgt.n	80052fe <__sflush_r+0xfe>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e78e      	b.n	800521c <__sflush_r+0x1c>
 80052fe:	4407      	add	r7, r0
 8005300:	eba8 0800 	sub.w	r8, r8, r0
 8005304:	e7e9      	b.n	80052da <__sflush_r+0xda>
 8005306:	bf00      	nop
 8005308:	dfbffffe 	.word	0xdfbffffe

0800530c <_fflush_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	b913      	cbnz	r3, 800531c <_fflush_r+0x10>
 8005316:	2500      	movs	r5, #0
 8005318:	4628      	mov	r0, r5
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	b118      	cbz	r0, 8005326 <_fflush_r+0x1a>
 800531e:	6a03      	ldr	r3, [r0, #32]
 8005320:	b90b      	cbnz	r3, 8005326 <_fflush_r+0x1a>
 8005322:	f7ff fa9b 	bl	800485c <__sinit>
 8005326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f3      	beq.n	8005316 <_fflush_r+0xa>
 800532e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005330:	07d0      	lsls	r0, r2, #31
 8005332:	d404      	bmi.n	800533e <_fflush_r+0x32>
 8005334:	0599      	lsls	r1, r3, #22
 8005336:	d402      	bmi.n	800533e <_fflush_r+0x32>
 8005338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800533a:	f7ff fb93 	bl	8004a64 <__retarget_lock_acquire_recursive>
 800533e:	4628      	mov	r0, r5
 8005340:	4621      	mov	r1, r4
 8005342:	f7ff ff5d 	bl	8005200 <__sflush_r>
 8005346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005348:	07da      	lsls	r2, r3, #31
 800534a:	4605      	mov	r5, r0
 800534c:	d4e4      	bmi.n	8005318 <_fflush_r+0xc>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	059b      	lsls	r3, r3, #22
 8005352:	d4e1      	bmi.n	8005318 <_fflush_r+0xc>
 8005354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005356:	f7ff fb86 	bl	8004a66 <__retarget_lock_release_recursive>
 800535a:	e7dd      	b.n	8005318 <_fflush_r+0xc>

0800535c <__swbuf_r>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	460e      	mov	r6, r1
 8005360:	4614      	mov	r4, r2
 8005362:	4605      	mov	r5, r0
 8005364:	b118      	cbz	r0, 800536e <__swbuf_r+0x12>
 8005366:	6a03      	ldr	r3, [r0, #32]
 8005368:	b90b      	cbnz	r3, 800536e <__swbuf_r+0x12>
 800536a:	f7ff fa77 	bl	800485c <__sinit>
 800536e:	69a3      	ldr	r3, [r4, #24]
 8005370:	60a3      	str	r3, [r4, #8]
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	071a      	lsls	r2, r3, #28
 8005376:	d525      	bpl.n	80053c4 <__swbuf_r+0x68>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	b31b      	cbz	r3, 80053c4 <__swbuf_r+0x68>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	6922      	ldr	r2, [r4, #16]
 8005380:	1a98      	subs	r0, r3, r2
 8005382:	6963      	ldr	r3, [r4, #20]
 8005384:	b2f6      	uxtb	r6, r6
 8005386:	4283      	cmp	r3, r0
 8005388:	4637      	mov	r7, r6
 800538a:	dc04      	bgt.n	8005396 <__swbuf_r+0x3a>
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f7ff ffbc 	bl	800530c <_fflush_r>
 8005394:	b9e0      	cbnz	r0, 80053d0 <__swbuf_r+0x74>
 8005396:	68a3      	ldr	r3, [r4, #8]
 8005398:	3b01      	subs	r3, #1
 800539a:	60a3      	str	r3, [r4, #8]
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	6022      	str	r2, [r4, #0]
 80053a2:	701e      	strb	r6, [r3, #0]
 80053a4:	6962      	ldr	r2, [r4, #20]
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d004      	beq.n	80053b6 <__swbuf_r+0x5a>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	07db      	lsls	r3, r3, #31
 80053b0:	d506      	bpl.n	80053c0 <__swbuf_r+0x64>
 80053b2:	2e0a      	cmp	r6, #10
 80053b4:	d104      	bne.n	80053c0 <__swbuf_r+0x64>
 80053b6:	4621      	mov	r1, r4
 80053b8:	4628      	mov	r0, r5
 80053ba:	f7ff ffa7 	bl	800530c <_fflush_r>
 80053be:	b938      	cbnz	r0, 80053d0 <__swbuf_r+0x74>
 80053c0:	4638      	mov	r0, r7
 80053c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 f806 	bl	80053d8 <__swsetup_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d0d5      	beq.n	800537c <__swbuf_r+0x20>
 80053d0:	f04f 37ff 	mov.w	r7, #4294967295
 80053d4:	e7f4      	b.n	80053c0 <__swbuf_r+0x64>
	...

080053d8 <__swsetup_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <__swsetup_r+0xac>)
 80053dc:	4605      	mov	r5, r0
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	460c      	mov	r4, r1
 80053e2:	b118      	cbz	r0, 80053ec <__swsetup_r+0x14>
 80053e4:	6a03      	ldr	r3, [r0, #32]
 80053e6:	b90b      	cbnz	r3, 80053ec <__swsetup_r+0x14>
 80053e8:	f7ff fa38 	bl	800485c <__sinit>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f2:	0718      	lsls	r0, r3, #28
 80053f4:	d422      	bmi.n	800543c <__swsetup_r+0x64>
 80053f6:	06d9      	lsls	r1, r3, #27
 80053f8:	d407      	bmi.n	800540a <__swsetup_r+0x32>
 80053fa:	2309      	movs	r3, #9
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	e034      	b.n	8005474 <__swsetup_r+0x9c>
 800540a:	0758      	lsls	r0, r3, #29
 800540c:	d512      	bpl.n	8005434 <__swsetup_r+0x5c>
 800540e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005410:	b141      	cbz	r1, 8005424 <__swsetup_r+0x4c>
 8005412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005416:	4299      	cmp	r1, r3
 8005418:	d002      	beq.n	8005420 <__swsetup_r+0x48>
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff fb24 	bl	8004a68 <_free_r>
 8005420:	2300      	movs	r3, #0
 8005422:	6363      	str	r3, [r4, #52]	; 0x34
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	2300      	movs	r3, #0
 800542e:	6063      	str	r3, [r4, #4]
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f043 0308 	orr.w	r3, r3, #8
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	b94b      	cbnz	r3, 8005454 <__swsetup_r+0x7c>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544a:	d003      	beq.n	8005454 <__swsetup_r+0x7c>
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f850 	bl	80054f4 <__smakebuf_r>
 8005454:	89a0      	ldrh	r0, [r4, #12]
 8005456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800545a:	f010 0301 	ands.w	r3, r0, #1
 800545e:	d00a      	beq.n	8005476 <__swsetup_r+0x9e>
 8005460:	2300      	movs	r3, #0
 8005462:	60a3      	str	r3, [r4, #8]
 8005464:	6963      	ldr	r3, [r4, #20]
 8005466:	425b      	negs	r3, r3
 8005468:	61a3      	str	r3, [r4, #24]
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	b943      	cbnz	r3, 8005480 <__swsetup_r+0xa8>
 800546e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005472:	d1c4      	bne.n	80053fe <__swsetup_r+0x26>
 8005474:	bd38      	pop	{r3, r4, r5, pc}
 8005476:	0781      	lsls	r1, r0, #30
 8005478:	bf58      	it	pl
 800547a:	6963      	ldrpl	r3, [r4, #20]
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	e7f4      	b.n	800546a <__swsetup_r+0x92>
 8005480:	2000      	movs	r0, #0
 8005482:	e7f7      	b.n	8005474 <__swsetup_r+0x9c>
 8005484:	20000064 	.word	0x20000064

08005488 <_sbrk_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d06      	ldr	r5, [pc, #24]	; (80054a4 <_sbrk_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb fb9c 	bl	8000bd0 <_sbrk>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_sbrk_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_sbrk_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	200002b8 	.word	0x200002b8

080054a8 <__swhatbuf_r>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	460c      	mov	r4, r1
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	b096      	sub	sp, #88	; 0x58
 80054b4:	4615      	mov	r5, r2
 80054b6:	461e      	mov	r6, r3
 80054b8:	da0d      	bge.n	80054d6 <__swhatbuf_r+0x2e>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054c0:	f04f 0100 	mov.w	r1, #0
 80054c4:	bf0c      	ite	eq
 80054c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80054ca:	2340      	movne	r3, #64	; 0x40
 80054cc:	2000      	movs	r0, #0
 80054ce:	6031      	str	r1, [r6, #0]
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	b016      	add	sp, #88	; 0x58
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	466a      	mov	r2, sp
 80054d8:	f000 f848 	bl	800556c <_fstat_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	dbec      	blt.n	80054ba <__swhatbuf_r+0x12>
 80054e0:	9901      	ldr	r1, [sp, #4]
 80054e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80054ea:	4259      	negs	r1, r3
 80054ec:	4159      	adcs	r1, r3
 80054ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f2:	e7eb      	b.n	80054cc <__swhatbuf_r+0x24>

080054f4 <__smakebuf_r>:
 80054f4:	898b      	ldrh	r3, [r1, #12]
 80054f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054f8:	079d      	lsls	r5, r3, #30
 80054fa:	4606      	mov	r6, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	d507      	bpl.n	8005510 <__smakebuf_r+0x1c>
 8005500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	2301      	movs	r3, #1
 800550a:	6163      	str	r3, [r4, #20]
 800550c:	b002      	add	sp, #8
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	ab01      	add	r3, sp, #4
 8005512:	466a      	mov	r2, sp
 8005514:	f7ff ffc8 	bl	80054a8 <__swhatbuf_r>
 8005518:	9900      	ldr	r1, [sp, #0]
 800551a:	4605      	mov	r5, r0
 800551c:	4630      	mov	r0, r6
 800551e:	f7ff fb0f 	bl	8004b40 <_malloc_r>
 8005522:	b948      	cbnz	r0, 8005538 <__smakebuf_r+0x44>
 8005524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005528:	059a      	lsls	r2, r3, #22
 800552a:	d4ef      	bmi.n	800550c <__smakebuf_r+0x18>
 800552c:	f023 0303 	bic.w	r3, r3, #3
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	e7e3      	b.n	8005500 <__smakebuf_r+0xc>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	6020      	str	r0, [r4, #0]
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	9b00      	ldr	r3, [sp, #0]
 8005544:	6163      	str	r3, [r4, #20]
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	6120      	str	r0, [r4, #16]
 800554a:	b15b      	cbz	r3, 8005564 <__smakebuf_r+0x70>
 800554c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005550:	4630      	mov	r0, r6
 8005552:	f000 f81d 	bl	8005590 <_isatty_r>
 8005556:	b128      	cbz	r0, 8005564 <__smakebuf_r+0x70>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	431d      	orrs	r5, r3
 8005568:	81a5      	strh	r5, [r4, #12]
 800556a:	e7cf      	b.n	800550c <__smakebuf_r+0x18>

0800556c <_fstat_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d07      	ldr	r5, [pc, #28]	; (800558c <_fstat_r+0x20>)
 8005570:	2300      	movs	r3, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	f7fb fb00 	bl	8000b7e <_fstat>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	d102      	bne.n	8005588 <_fstat_r+0x1c>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	b103      	cbz	r3, 8005588 <_fstat_r+0x1c>
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	bd38      	pop	{r3, r4, r5, pc}
 800558a:	bf00      	nop
 800558c:	200002b8 	.word	0x200002b8

08005590 <_isatty_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d06      	ldr	r5, [pc, #24]	; (80055ac <_isatty_r+0x1c>)
 8005594:	2300      	movs	r3, #0
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fb faff 	bl	8000b9e <_isatty>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_isatty_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_isatty_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	200002b8 	.word	0x200002b8

080055b0 <_init>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr

080055bc <_fini>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr
